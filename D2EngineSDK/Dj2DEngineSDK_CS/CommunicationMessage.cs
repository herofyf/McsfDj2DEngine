// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace McsfCommunication {
  
  public static partial class CommunicationMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ImagePosId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ImagePosId, global::McsfCommunication.ImagePosId.Builder> internal__static_McsfCommunication_ImagePosId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_OpenImageInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.OpenImageInformation, global::McsfCommunication.OpenImageInformation.Builder> internal__static_McsfCommunication_OpenImageInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_SeriesSettingInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.SeriesSettingInformation, global::McsfCommunication.SeriesSettingInformation.Builder> internal__static_McsfCommunication_SeriesSettingInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_SiteSettingInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.SiteSettingInformation, global::McsfCommunication.SiteSettingInformation.Builder> internal__static_McsfCommunication_SiteSettingInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_SiteSettingContent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.SiteSettingContent, global::McsfCommunication.SiteSettingContent.Builder> internal__static_McsfCommunication_SiteSettingContent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_MouseInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.MouseInformation, global::McsfCommunication.MouseInformation.Builder> internal__static_McsfCommunication_MouseInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_KeyboardInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.KeyboardInformation, global::McsfCommunication.KeyboardInformation.Builder> internal__static_McsfCommunication_KeyboardInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ScaleToolInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ScaleToolInformation, global::McsfCommunication.ScaleToolInformation.Builder> internal__static_McsfCommunication_ScaleToolInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_RotateInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.RotateInformation, global::McsfCommunication.RotateInformation.Builder> internal__static_McsfCommunication_RotateInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_WinWidthCenterInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.WinWidthCenterInformation, global::McsfCommunication.WinWidthCenterInformation.Builder> internal__static_McsfCommunication_WinWidthCenterInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_LocalizerLinesResource__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.LocalizerLinesResource, global::McsfCommunication.LocalizerLinesResource.Builder> internal__static_McsfCommunication_LocalizerLinesResource__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ToolInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ToolInformation, global::McsfCommunication.ToolInformation.Builder> internal__static_McsfCommunication_ToolInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ImageRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ImageRequest, global::McsfCommunication.ImageRequest.Builder> internal__static_McsfCommunication_ImageRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ReportMouseCursorArgs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ReportMouseCursorArgs, global::McsfCommunication.ReportMouseCursorArgs.Builder> internal__static_McsfCommunication_ReportMouseCursorArgs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ReportSeriesStatusArgs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ReportSeriesStatusArgs, global::McsfCommunication.ReportSeriesStatusArgs.Builder> internal__static_McsfCommunication_ReportSeriesStatusArgs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_McsfCommunication_ReportStatusInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ReportStatusInformation, global::McsfCommunication.ReportStatusInformation.Builder> internal__static_McsfCommunication_ReportStatusInformation__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static CommunicationMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChpDb21tdW5pY2F0aW9uTWVzc2FnZS5wcm90bxIRTWNzZkNvbW11bmljYXRp" + 
          "b24aH0NvbW11bmljYXRpb25NZXNzYWdlX05vdGUucHJvdG8icQoKSW1hZ2VQ" + 
          "b3NJZBIOCgZzaXRlSWQYASACKAkSDgoGcGFnZUlkGAIgAigJEhgKDXNlcmll" + 
          "c1BhZ2VQb3MYAyABKAU6ATASEAoIc2VyaWVzSWQYBCACKAkSFwoMaW1hZ2VD" + 
          "ZWxsUG9zGAUgASgFOgEwIoMBChRPcGVuSW1hZ2VJbmZvcm1hdGlvbhIRCgZv" + 
          "ZmZzZXQYASACKAU6ATASEwoIY2VsbHNOdW0YAiABKAU6ATESEgoKaW1hZ2VX" + 
          "aWR0aBgDIAIoBRITCgtpbWFnZUhlaWdodBgEIAIoBRIaCgtpc0Fic09mZnNl" + 
          "dBgFIAEoCDoFZmFsc2UiXQoYU2VyaWVzU2V0dGluZ0luZm9ybWF0aW9uEh4K" + 
          "EGVuYWJsZVRyYW5zZlN5bmMYASABKAg6BHRydWUSIQoTZW5hYmxlU2VyaWVz" + 
          "UGVyc2lzdBgCIAEoCDoEdHJ1ZSKYAQoWU2l0ZVNldHRpbmdJbmZvcm1hdGlv" + 
          "bhI7Cg9zaXRlU2V0dGluZ1R5cGUYASACKA4yIi5NY3NmQ29tbXVuaWNhdGlv" + 
          "bi5TaXRlU2V0dGluZ1R5cGUSQQoSc2l0ZVNldHRpbmdDb250ZW50GAIgAigL" + 
          "MiUuTWNzZkNvbW11bmljYXRpb24uU2l0ZVNldHRpbmdDb250ZW50IloKElNp" + 
          "dGVTZXR0aW5nQ29udGVudBIXCgxtZXNzYWdlSW5kZXgYASACKAU6ATASEwoL" + 
          "bWVzc2FnZVNpemUYAiACKAUSFgoObWVzc2FnZUNvbnRlbnQYAyACKAwiogEK" + 
          "EE1vdXNlSW5mb3JtYXRpb24SDgoGcG9pbnRYGAEgAigFEg4KBnBvaW50WRgC" + 
          "IAIoBRIXCghsZWZ0RG93bhgDIAIoCDoFZmFsc2USEQoJcmlnaHREb3duGAQg" + 
          "ASgIEhUKDW1pZFJvbGxlckRvd24YBSABKAgSFQoNbWlkUm9sbGVyTW92ZRgG" + 
          "IAEoCBIUCgxiZWhhdmlvclR5cGUYByABKAUirAEKE0tleWJvYXJkSW5mb3Jt" + 
          "YXRpb24SDgoGa2V5VmFsGAEgAigJEhMKC2N0cmxQcmVzc2VkGAIgASgIEhQK" + 
          "DHNoaWZ0UHJlc3NlZBgDIAEoCBISCgphbHRQcmVzc2VkGAQgASgIEkYKCmZl" + 
          "YXR1cmVLZXkYBSABKA4yKS5NY3NmQ29tbXVuaWNhdGlvbi5LZXlib2FyZEZl" + 
          "YXR1cmVLZXlUeXBlOgdGS19Ob25lIkIKFFNjYWxlVG9vbEluZm9ybWF0aW9u" + 
          "EhQKDHNjYWxlWEZhY3RvchgBIAIoARIUCgxzY2FsZVlGYWN0b3IYAiACKAEi" + 
          "IgoRUm90YXRlSW5mb3JtYXRpb24SDQoFYW5nbGUYASACKAEiRgoZV2luV2lk" + 
          "dGhDZW50ZXJJbmZvcm1hdGlvbhITCgh3aW5XaWR0aBgBIAIoAToBMBIUCgl3" + 
          "aW5DZW50ZXIYAiACKAE6ATAiZAoWTG9jYWxpemVyTGluZXNSZXNvdXJjZRIV" + 
          "CgpyZXNvdXJjZUlkGAEgAigFOgEwEh0KD2lzUmVmZXJyaW5nU2lkZRgCIAIo" + 
          "CDoEdHJ1ZRIUCglvcGVyYXRpb24YAyABKAU6ATAirgMKD1Rvb2xJbmZvcm1h" + 
          "dGlvbhIyCgh0b29sVHlwZRgBIAIoDjIgLk1jc2ZDb21tdW5pY2F0aW9uLklt" + 
          "YWdlVG9vbFR5cGUSQQoQc2NhbGVJbmZvcm1hdGlvbhgCIAEoCzInLk1jc2ZD" + 
          "b21tdW5pY2F0aW9uLlNjYWxlVG9vbEluZm9ybWF0aW9uEj8KEXJvdGF0ZUlu" + 
          "Zm9ybWF0aW9uGAMgASgLMiQuTWNzZkNvbW11bmljYXRpb24uUm90YXRlSW5m" + 
          "b3JtYXRpb24STwoZd2luV2lkdGhDZW50ZXJJbmZvcm1hdGlvbhgEIAEoCzIs" + 
          "Lk1jc2ZDb21tdW5pY2F0aW9uLldpbldpZHRoQ2VudGVySW5mb3JtYXRpb24S" + 
          "SQoWbG9jYWxpemVyTGluZXNSZXNvdXJjZRgFIAEoCzIpLk1jc2ZDb21tdW5p" + 
          "Y2F0aW9uLkxvY2FsaXplckxpbmVzUmVzb3VyY2USRwoVbm90ZU9iamVjdElu" + 
          "Zm9ybWF0aW9uGAYgASgLMiguTWNzZkNvbW11bmljYXRpb24uTm90ZU9iamVj" + 
          "dEluZm9ybWF0aW9uIuMDCgxJbWFnZVJlcXVlc3QSMQoKaW1hZ2VQb3NJZBgB" + 
          "IAIoCzIdLk1jc2ZDb21tdW5pY2F0aW9uLkltYWdlUG9zSWQSRQoUb3Blbklt" + 
          "YWdlSW5mb3JtYXRpb24YAiABKAsyJy5NY3NmQ29tbXVuaWNhdGlvbi5PcGVu" + 
          "SW1hZ2VJbmZvcm1hdGlvbhI9ChBtb3VzZUluZm9ybWF0aW9uGAMgASgLMiMu" + 
          "TWNzZkNvbW11bmljYXRpb24uTW91c2VJbmZvcm1hdGlvbhJDChNrZXlib2Fy" + 
          "ZEluZm9ybWF0aW9uGAQgASgLMiYuTWNzZkNvbW11bmljYXRpb24uS2V5Ym9h" + 
          "cmRJbmZvcm1hdGlvbhI7Cg90b29sSW5mb3JtYXRpb24YBSABKAsyIi5NY3Nm" + 
          "Q29tbXVuaWNhdGlvbi5Ub29sSW5mb3JtYXRpb24STQoYc2VyaWVzU2V0dGlu" + 
          "Z0luZm9ybWF0aW9uGAYgASgLMisuTWNzZkNvbW11bmljYXRpb24uU2VyaWVz" + 
          "U2V0dGluZ0luZm9ybWF0aW9uEkkKFnNpdGVTZXR0aW5nSW5mb3JtYXRpb24Y" + 
          "ByABKAsyKS5NY3NmQ29tbXVuaWNhdGlvbi5TaXRlU2V0dGluZ0luZm9ybWF0" + 
          "aW9uImIKFVJlcG9ydE1vdXNlQ3Vyc29yQXJncxJJCgltb3VzZVR5cGUYASAC" + 
          "KA4yIi5NY3NmQ29tbXVuaWNhdGlvbi5Nb3VzZUN1cnNvclR5cGU6Ek1vdXNl" + 
          "Q3Vyc29yRGVmYXVsdCJdChZSZXBvcnRTZXJpZXNTdGF0dXNBcmdzEhwKFGZp" + 
          "cnN0U2hvd25JbWFnZUluZGV4GAEgAigFEhAKCGNlbGxzTnVtGAIgAigFEhMK" + 
          "C2ltYWdlc0NvdW50GAMgAigFIsICChdSZXBvcnRTdGF0dXNJbmZvcm1hdGlv" + 
          "bhI3CgpyZXBvcnRUeXBlGAEgAigOMiMuTWNzZkNvbW11bmljYXRpb24uUmVw" + 
          "b3J0U3RhdHVzVHlwZRIxCgppbWFnZVBvc0lkGAIgAigLMh0uTWNzZkNvbW11" + 
          "bmljYXRpb24uSW1hZ2VQb3NJZBI9Cgttb3VzZUN1cnNvchgDIAEoCzIoLk1j" + 
          "c2ZDb21tdW5pY2F0aW9uLlJlcG9ydE1vdXNlQ3Vyc29yQXJncxI/CgxzZXJp" + 
          "ZXNTdGF0dXMYBCABKAsyKS5NY3NmQ29tbXVuaWNhdGlvbi5SZXBvcnRTZXJp" + 
          "ZXNTdGF0dXNBcmdzEjsKCm5vdGVTdGF0dXMYBSABKAsyJy5NY3NmQ29tbXVu" + 
          "aWNhdGlvbi5SZXBvcnROb3RlU3RhdHVzQXJncyrNAQoSTWVzc2FnZUNvbW1h" + 
          "bmRUeXBlEhAKCkxvYWRTZXJpZXMQoJwBEg8KCU9wZW5JbWFnZRChnAESEQoL" + 
          "Q2xvc2VTZXJpZXMQopwBEhQKDkNoYW5nZVRvb2xUeXBlEKOcARILCgVNb3Vz" + 
          "ZRCknAESDgoIS2V5Ym9hcmQQpZwBEhQKDlNlcmllc1NldHRpbmdzEKacARIS" + 
          "CgxTaXRlU2V0dGluZ3MQp5wBEhAKClJlc2V0SW1hZ2UQqJwBEhIKDFJlcG9y" + 
          "dFN0YXR1cxCIpAEqtQIKDUltYWdlVG9vbFR5cGUSDgoITGluZVRvb2wQsOoB" + 
          "Eg8KCUFuZ2xlVG9vbBCx6gESEAoKQ2lyY2xlVG9vbBCy6gESDwoJU2NhbGVU" + 
          "b29sEJXrARITCg1UcmFuc2xhdGVUb29sEJbrARIQCgpSb3RhdGVUb29sEJfr" + 
          "ARIXChFTZXRXaW5DZW50ZXJXaWR0aBCY6wESCwoFRmxpcFgQmesBEgsKBUZs" + 
          "aXBZEJrrARIRCgtDb2xvckludmVydBCb6wESDgoIRnJlZUhhbmQQnOsBEg4K" + 
          "CE5vdGVUb29sEJ3rARIRCgtTZXROb3RlUHJvcBCe6wESFgoQTWFnbmlmeUds" + 
          "YXNzVG9vbBD56wESFAoOTG9jYWxpemVyTGluZXMQmPIBEhIKDEhhbmRNb2Rl" + 
          "VG9vbBCA+gEqMAoPU2l0ZVNldHRpbmdUeXBlEh0KF1NpdGVDb21tZW50U2V0" + 
          "dGluZ3NUeXBlEODcKio1ChZLZXlib2FyZEZlYXR1cmVLZXlUeXBlEg0KB0ZL" + 
          "X05vbmUQ6LwYEgwKBkZLX0RFTBDpvBgqYgoQUmVwb3J0U3RhdHVzVHlwZRIX" + 
          "ChFSZXBvcnRNb3VzZVN0YXR1cxDQxBgSGAoSUmVwb3J0U2VyaWVzU3RhdHVz" + 
          "ENHEGBIbChVSZXBvcnRJbWFnZU5vdGVTdGF0dXMQ0sQYKmEKD01vdXNlQ3Vy" + 
          "c29yVHlwZRIYChJNb3VzZUN1cnNvckRlZmF1bHQQuMwYEhUKD01vdXNlQ3Vy" + 
          "c29yV2FpdBC5zBgSHQoXTW91c2VDdXJzb3JNYWduaWZ5R2xhc3MQuswY");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_McsfCommunication_ImagePosId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_McsfCommunication_ImagePosId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ImagePosId, global::McsfCommunication.ImagePosId.Builder>(internal__static_McsfCommunication_ImagePosId__Descriptor,
                new string[] { "SiteId", "PageId", "SeriesPagePos", "SeriesId", "ImageCellPos", });
        internal__static_McsfCommunication_OpenImageInformation__Descriptor = Descriptor.MessageTypes[1];
        internal__static_McsfCommunication_OpenImageInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.OpenImageInformation, global::McsfCommunication.OpenImageInformation.Builder>(internal__static_McsfCommunication_OpenImageInformation__Descriptor,
                new string[] { "Offset", "CellsNum", "ImageWidth", "ImageHeight", "IsAbsOffset", });
        internal__static_McsfCommunication_SeriesSettingInformation__Descriptor = Descriptor.MessageTypes[2];
        internal__static_McsfCommunication_SeriesSettingInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.SeriesSettingInformation, global::McsfCommunication.SeriesSettingInformation.Builder>(internal__static_McsfCommunication_SeriesSettingInformation__Descriptor,
                new string[] { "EnableTransfSync", "EnableSeriesPersist", });
        internal__static_McsfCommunication_SiteSettingInformation__Descriptor = Descriptor.MessageTypes[3];
        internal__static_McsfCommunication_SiteSettingInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.SiteSettingInformation, global::McsfCommunication.SiteSettingInformation.Builder>(internal__static_McsfCommunication_SiteSettingInformation__Descriptor,
                new string[] { "SiteSettingType", "SiteSettingContent", });
        internal__static_McsfCommunication_SiteSettingContent__Descriptor = Descriptor.MessageTypes[4];
        internal__static_McsfCommunication_SiteSettingContent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.SiteSettingContent, global::McsfCommunication.SiteSettingContent.Builder>(internal__static_McsfCommunication_SiteSettingContent__Descriptor,
                new string[] { "MessageIndex", "MessageSize", "MessageContent", });
        internal__static_McsfCommunication_MouseInformation__Descriptor = Descriptor.MessageTypes[5];
        internal__static_McsfCommunication_MouseInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.MouseInformation, global::McsfCommunication.MouseInformation.Builder>(internal__static_McsfCommunication_MouseInformation__Descriptor,
                new string[] { "PointX", "PointY", "LeftDown", "RightDown", "MidRollerDown", "MidRollerMove", "BehaviorType", });
        internal__static_McsfCommunication_KeyboardInformation__Descriptor = Descriptor.MessageTypes[6];
        internal__static_McsfCommunication_KeyboardInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.KeyboardInformation, global::McsfCommunication.KeyboardInformation.Builder>(internal__static_McsfCommunication_KeyboardInformation__Descriptor,
                new string[] { "KeyVal", "CtrlPressed", "ShiftPressed", "AltPressed", "FeatureKey", });
        internal__static_McsfCommunication_ScaleToolInformation__Descriptor = Descriptor.MessageTypes[7];
        internal__static_McsfCommunication_ScaleToolInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ScaleToolInformation, global::McsfCommunication.ScaleToolInformation.Builder>(internal__static_McsfCommunication_ScaleToolInformation__Descriptor,
                new string[] { "ScaleXFactor", "ScaleYFactor", });
        internal__static_McsfCommunication_RotateInformation__Descriptor = Descriptor.MessageTypes[8];
        internal__static_McsfCommunication_RotateInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.RotateInformation, global::McsfCommunication.RotateInformation.Builder>(internal__static_McsfCommunication_RotateInformation__Descriptor,
                new string[] { "Angle", });
        internal__static_McsfCommunication_WinWidthCenterInformation__Descriptor = Descriptor.MessageTypes[9];
        internal__static_McsfCommunication_WinWidthCenterInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.WinWidthCenterInformation, global::McsfCommunication.WinWidthCenterInformation.Builder>(internal__static_McsfCommunication_WinWidthCenterInformation__Descriptor,
                new string[] { "WinWidth", "WinCenter", });
        internal__static_McsfCommunication_LocalizerLinesResource__Descriptor = Descriptor.MessageTypes[10];
        internal__static_McsfCommunication_LocalizerLinesResource__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.LocalizerLinesResource, global::McsfCommunication.LocalizerLinesResource.Builder>(internal__static_McsfCommunication_LocalizerLinesResource__Descriptor,
                new string[] { "ResourceId", "IsReferringSide", "Operation", });
        internal__static_McsfCommunication_ToolInformation__Descriptor = Descriptor.MessageTypes[11];
        internal__static_McsfCommunication_ToolInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ToolInformation, global::McsfCommunication.ToolInformation.Builder>(internal__static_McsfCommunication_ToolInformation__Descriptor,
                new string[] { "ToolType", "ScaleInformation", "RotateInformation", "WinWidthCenterInformation", "LocalizerLinesResource", "NoteObjectInformation", });
        internal__static_McsfCommunication_ImageRequest__Descriptor = Descriptor.MessageTypes[12];
        internal__static_McsfCommunication_ImageRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ImageRequest, global::McsfCommunication.ImageRequest.Builder>(internal__static_McsfCommunication_ImageRequest__Descriptor,
                new string[] { "ImagePosId", "OpenImageInformation", "MouseInformation", "KeyboardInformation", "ToolInformation", "SeriesSettingInformation", "SiteSettingInformation", });
        internal__static_McsfCommunication_ReportMouseCursorArgs__Descriptor = Descriptor.MessageTypes[13];
        internal__static_McsfCommunication_ReportMouseCursorArgs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ReportMouseCursorArgs, global::McsfCommunication.ReportMouseCursorArgs.Builder>(internal__static_McsfCommunication_ReportMouseCursorArgs__Descriptor,
                new string[] { "MouseType", });
        internal__static_McsfCommunication_ReportSeriesStatusArgs__Descriptor = Descriptor.MessageTypes[14];
        internal__static_McsfCommunication_ReportSeriesStatusArgs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ReportSeriesStatusArgs, global::McsfCommunication.ReportSeriesStatusArgs.Builder>(internal__static_McsfCommunication_ReportSeriesStatusArgs__Descriptor,
                new string[] { "FirstShownImageIndex", "CellsNum", "ImagesCount", });
        internal__static_McsfCommunication_ReportStatusInformation__Descriptor = Descriptor.MessageTypes[15];
        internal__static_McsfCommunication_ReportStatusInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::McsfCommunication.ReportStatusInformation, global::McsfCommunication.ReportStatusInformation.Builder>(internal__static_McsfCommunication_ReportStatusInformation__Descriptor,
                new string[] { "ReportType", "ImagePosId", "MouseCursor", "SeriesStatus", "NoteStatus", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::McsfCommunication.CommunicationMessageNote.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum MessageCommandType {
    LoadSeries = 20000,
    OpenImage = 20001,
    CloseSeries = 20002,
    ChangeToolType = 20003,
    Mouse = 20004,
    Keyboard = 20005,
    SeriesSettings = 20006,
    SiteSettings = 20007,
    ResetImage = 20008,
    ReportStatus = 21000,
  }
  
  public enum ImageToolType {
    LineTool = 30000,
    AngleTool = 30001,
    CircleTool = 30002,
    ScaleTool = 30101,
    TranslateTool = 30102,
    RotateTool = 30103,
    SetWinCenterWidth = 30104,
    FlipX = 30105,
    FlipY = 30106,
    ColorInvert = 30107,
    FreeHand = 30108,
    NoteTool = 30109,
    SetNoteProp = 30110,
    MagnifyGlassTool = 30201,
    LocalizerLines = 31000,
    HandModeTool = 32000,
  }
  
  public enum SiteSettingType {
    SiteCommentSettingsType = 700000,
  }
  
  public enum KeyboardFeatureKeyType {
    FK_None = 401000,
    FK_DEL = 401001,
  }
  
  public enum ReportStatusType {
    ReportMouseStatus = 402000,
    ReportSeriesStatus = 402001,
    ReportImageNoteStatus = 402002,
  }
  
  public enum MouseCursorType {
    MouseCursorDefault = 403000,
    MouseCursorWait = 403001,
    MouseCursorMagnifyGlass = 403002,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class ImagePosId : pb::GeneratedMessage<ImagePosId, ImagePosId.Builder> {
    private static readonly ImagePosId defaultInstance = new Builder().BuildPartial();
    public static ImagePosId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ImagePosId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ImagePosId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ImagePosId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ImagePosId, ImagePosId.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ImagePosId__FieldAccessorTable; }
    }
    
    public const int SiteIdFieldNumber = 1;
    private bool hasSiteId;
    private string siteId_ = "";
    public bool HasSiteId {
      get { return hasSiteId; }
    }
    public string SiteId {
      get { return siteId_; }
    }
    
    public const int PageIdFieldNumber = 2;
    private bool hasPageId;
    private string pageId_ = "";
    public bool HasPageId {
      get { return hasPageId; }
    }
    public string PageId {
      get { return pageId_; }
    }
    
    public const int SeriesPagePosFieldNumber = 3;
    private bool hasSeriesPagePos;
    private int seriesPagePos_ = 0;
    public bool HasSeriesPagePos {
      get { return hasSeriesPagePos; }
    }
    public int SeriesPagePos {
      get { return seriesPagePos_; }
    }
    
    public const int SeriesIdFieldNumber = 4;
    private bool hasSeriesId;
    private string seriesId_ = "";
    public bool HasSeriesId {
      get { return hasSeriesId; }
    }
    public string SeriesId {
      get { return seriesId_; }
    }
    
    public const int ImageCellPosFieldNumber = 5;
    private bool hasImageCellPos;
    private int imageCellPos_ = 0;
    public bool HasImageCellPos {
      get { return hasImageCellPos; }
    }
    public int ImageCellPos {
      get { return imageCellPos_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSiteId) return false;
        if (!hasPageId) return false;
        if (!hasSeriesId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSiteId) {
        output.WriteString(1, SiteId);
      }
      if (HasPageId) {
        output.WriteString(2, PageId);
      }
      if (HasSeriesPagePos) {
        output.WriteInt32(3, SeriesPagePos);
      }
      if (HasSeriesId) {
        output.WriteString(4, SeriesId);
      }
      if (HasImageCellPos) {
        output.WriteInt32(5, ImageCellPos);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSiteId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SiteId);
        }
        if (HasPageId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PageId);
        }
        if (HasSeriesPagePos) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SeriesPagePos);
        }
        if (HasSeriesId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SeriesId);
        }
        if (HasImageCellPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ImageCellPos);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ImagePosId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ImagePosId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ImagePosId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ImagePosId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ImagePosId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ImagePosId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ImagePosId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ImagePosId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ImagePosId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ImagePosId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ImagePosId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ImagePosId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ImagePosId result = new ImagePosId();
      
      protected override ImagePosId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ImagePosId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ImagePosId.Descriptor; }
      }
      
      public override ImagePosId DefaultInstanceForType {
        get { return global::McsfCommunication.ImagePosId.DefaultInstance; }
      }
      
      public override ImagePosId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ImagePosId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ImagePosId) {
          return MergeFrom((ImagePosId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ImagePosId other) {
        if (other == global::McsfCommunication.ImagePosId.DefaultInstance) return this;
        if (other.HasSiteId) {
          SiteId = other.SiteId;
        }
        if (other.HasPageId) {
          PageId = other.PageId;
        }
        if (other.HasSeriesPagePos) {
          SeriesPagePos = other.SeriesPagePos;
        }
        if (other.HasSeriesId) {
          SeriesId = other.SeriesId;
        }
        if (other.HasImageCellPos) {
          ImageCellPos = other.ImageCellPos;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              SiteId = input.ReadString();
              break;
            }
            case 18: {
              PageId = input.ReadString();
              break;
            }
            case 24: {
              SeriesPagePos = input.ReadInt32();
              break;
            }
            case 34: {
              SeriesId = input.ReadString();
              break;
            }
            case 40: {
              ImageCellPos = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSiteId {
        get { return result.HasSiteId; }
      }
      public string SiteId {
        get { return result.SiteId; }
        set { SetSiteId(value); }
      }
      public Builder SetSiteId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSiteId = true;
        result.siteId_ = value;
        return this;
      }
      public Builder ClearSiteId() {
        result.hasSiteId = false;
        result.siteId_ = "";
        return this;
      }
      
      public bool HasPageId {
        get { return result.HasPageId; }
      }
      public string PageId {
        get { return result.PageId; }
        set { SetPageId(value); }
      }
      public Builder SetPageId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPageId = true;
        result.pageId_ = value;
        return this;
      }
      public Builder ClearPageId() {
        result.hasPageId = false;
        result.pageId_ = "";
        return this;
      }
      
      public bool HasSeriesPagePos {
        get { return result.HasSeriesPagePos; }
      }
      public int SeriesPagePos {
        get { return result.SeriesPagePos; }
        set { SetSeriesPagePos(value); }
      }
      public Builder SetSeriesPagePos(int value) {
        result.hasSeriesPagePos = true;
        result.seriesPagePos_ = value;
        return this;
      }
      public Builder ClearSeriesPagePos() {
        result.hasSeriesPagePos = false;
        result.seriesPagePos_ = 0;
        return this;
      }
      
      public bool HasSeriesId {
        get { return result.HasSeriesId; }
      }
      public string SeriesId {
        get { return result.SeriesId; }
        set { SetSeriesId(value); }
      }
      public Builder SetSeriesId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSeriesId = true;
        result.seriesId_ = value;
        return this;
      }
      public Builder ClearSeriesId() {
        result.hasSeriesId = false;
        result.seriesId_ = "";
        return this;
      }
      
      public bool HasImageCellPos {
        get { return result.HasImageCellPos; }
      }
      public int ImageCellPos {
        get { return result.ImageCellPos; }
        set { SetImageCellPos(value); }
      }
      public Builder SetImageCellPos(int value) {
        result.hasImageCellPos = true;
        result.imageCellPos_ = value;
        return this;
      }
      public Builder ClearImageCellPos() {
        result.hasImageCellPos = false;
        result.imageCellPos_ = 0;
        return this;
      }
    }
    static ImagePosId() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class OpenImageInformation : pb::GeneratedMessage<OpenImageInformation, OpenImageInformation.Builder> {
    private static readonly OpenImageInformation defaultInstance = new Builder().BuildPartial();
    public static OpenImageInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OpenImageInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OpenImageInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_OpenImageInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OpenImageInformation, OpenImageInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_OpenImageInformation__FieldAccessorTable; }
    }
    
    public const int OffsetFieldNumber = 1;
    private bool hasOffset;
    private int offset_ = 0;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public int Offset {
      get { return offset_; }
    }
    
    public const int CellsNumFieldNumber = 2;
    private bool hasCellsNum;
    private int cellsNum_ = 1;
    public bool HasCellsNum {
      get { return hasCellsNum; }
    }
    public int CellsNum {
      get { return cellsNum_; }
    }
    
    public const int ImageWidthFieldNumber = 3;
    private bool hasImageWidth;
    private int imageWidth_ = 0;
    public bool HasImageWidth {
      get { return hasImageWidth; }
    }
    public int ImageWidth {
      get { return imageWidth_; }
    }
    
    public const int ImageHeightFieldNumber = 4;
    private bool hasImageHeight;
    private int imageHeight_ = 0;
    public bool HasImageHeight {
      get { return hasImageHeight; }
    }
    public int ImageHeight {
      get { return imageHeight_; }
    }
    
    public const int IsAbsOffsetFieldNumber = 5;
    private bool hasIsAbsOffset;
    private bool isAbsOffset_ = false;
    public bool HasIsAbsOffset {
      get { return hasIsAbsOffset; }
    }
    public bool IsAbsOffset {
      get { return isAbsOffset_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOffset) return false;
        if (!hasImageWidth) return false;
        if (!hasImageHeight) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOffset) {
        output.WriteInt32(1, Offset);
      }
      if (HasCellsNum) {
        output.WriteInt32(2, CellsNum);
      }
      if (HasImageWidth) {
        output.WriteInt32(3, ImageWidth);
      }
      if (HasImageHeight) {
        output.WriteInt32(4, ImageHeight);
      }
      if (HasIsAbsOffset) {
        output.WriteBool(5, IsAbsOffset);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOffset) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Offset);
        }
        if (HasCellsNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, CellsNum);
        }
        if (HasImageWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ImageWidth);
        }
        if (HasImageHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ImageHeight);
        }
        if (HasIsAbsOffset) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, IsAbsOffset);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OpenImageInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OpenImageInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OpenImageInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenImageInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OpenImageInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OpenImageInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OpenImageInformation result = new OpenImageInformation();
      
      protected override OpenImageInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OpenImageInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.OpenImageInformation.Descriptor; }
      }
      
      public override OpenImageInformation DefaultInstanceForType {
        get { return global::McsfCommunication.OpenImageInformation.DefaultInstance; }
      }
      
      public override OpenImageInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OpenImageInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OpenImageInformation) {
          return MergeFrom((OpenImageInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OpenImageInformation other) {
        if (other == global::McsfCommunication.OpenImageInformation.DefaultInstance) return this;
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasCellsNum) {
          CellsNum = other.CellsNum;
        }
        if (other.HasImageWidth) {
          ImageWidth = other.ImageWidth;
        }
        if (other.HasImageHeight) {
          ImageHeight = other.ImageHeight;
        }
        if (other.HasIsAbsOffset) {
          IsAbsOffset = other.IsAbsOffset;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Offset = input.ReadInt32();
              break;
            }
            case 16: {
              CellsNum = input.ReadInt32();
              break;
            }
            case 24: {
              ImageWidth = input.ReadInt32();
              break;
            }
            case 32: {
              ImageHeight = input.ReadInt32();
              break;
            }
            case 40: {
              IsAbsOffset = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasOffset {
        get { return result.HasOffset; }
      }
      public int Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(int value) {
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
      
      public bool HasCellsNum {
        get { return result.HasCellsNum; }
      }
      public int CellsNum {
        get { return result.CellsNum; }
        set { SetCellsNum(value); }
      }
      public Builder SetCellsNum(int value) {
        result.hasCellsNum = true;
        result.cellsNum_ = value;
        return this;
      }
      public Builder ClearCellsNum() {
        result.hasCellsNum = false;
        result.cellsNum_ = 1;
        return this;
      }
      
      public bool HasImageWidth {
        get { return result.HasImageWidth; }
      }
      public int ImageWidth {
        get { return result.ImageWidth; }
        set { SetImageWidth(value); }
      }
      public Builder SetImageWidth(int value) {
        result.hasImageWidth = true;
        result.imageWidth_ = value;
        return this;
      }
      public Builder ClearImageWidth() {
        result.hasImageWidth = false;
        result.imageWidth_ = 0;
        return this;
      }
      
      public bool HasImageHeight {
        get { return result.HasImageHeight; }
      }
      public int ImageHeight {
        get { return result.ImageHeight; }
        set { SetImageHeight(value); }
      }
      public Builder SetImageHeight(int value) {
        result.hasImageHeight = true;
        result.imageHeight_ = value;
        return this;
      }
      public Builder ClearImageHeight() {
        result.hasImageHeight = false;
        result.imageHeight_ = 0;
        return this;
      }
      
      public bool HasIsAbsOffset {
        get { return result.HasIsAbsOffset; }
      }
      public bool IsAbsOffset {
        get { return result.IsAbsOffset; }
        set { SetIsAbsOffset(value); }
      }
      public Builder SetIsAbsOffset(bool value) {
        result.hasIsAbsOffset = true;
        result.isAbsOffset_ = value;
        return this;
      }
      public Builder ClearIsAbsOffset() {
        result.hasIsAbsOffset = false;
        result.isAbsOffset_ = false;
        return this;
      }
    }
    static OpenImageInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class SeriesSettingInformation : pb::GeneratedMessage<SeriesSettingInformation, SeriesSettingInformation.Builder> {
    private static readonly SeriesSettingInformation defaultInstance = new Builder().BuildPartial();
    public static SeriesSettingInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SeriesSettingInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SeriesSettingInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_SeriesSettingInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SeriesSettingInformation, SeriesSettingInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_SeriesSettingInformation__FieldAccessorTable; }
    }
    
    public const int EnableTransfSyncFieldNumber = 1;
    private bool hasEnableTransfSync;
    private bool enableTransfSync_ = true;
    public bool HasEnableTransfSync {
      get { return hasEnableTransfSync; }
    }
    public bool EnableTransfSync {
      get { return enableTransfSync_; }
    }
    
    public const int EnableSeriesPersistFieldNumber = 2;
    private bool hasEnableSeriesPersist;
    private bool enableSeriesPersist_ = true;
    public bool HasEnableSeriesPersist {
      get { return hasEnableSeriesPersist; }
    }
    public bool EnableSeriesPersist {
      get { return enableSeriesPersist_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasEnableTransfSync) {
        output.WriteBool(1, EnableTransfSync);
      }
      if (HasEnableSeriesPersist) {
        output.WriteBool(2, EnableSeriesPersist);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasEnableTransfSync) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, EnableTransfSync);
        }
        if (HasEnableSeriesPersist) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, EnableSeriesPersist);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SeriesSettingInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SeriesSettingInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SeriesSettingInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SeriesSettingInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SeriesSettingInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SeriesSettingInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SeriesSettingInformation result = new SeriesSettingInformation();
      
      protected override SeriesSettingInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SeriesSettingInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.SeriesSettingInformation.Descriptor; }
      }
      
      public override SeriesSettingInformation DefaultInstanceForType {
        get { return global::McsfCommunication.SeriesSettingInformation.DefaultInstance; }
      }
      
      public override SeriesSettingInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SeriesSettingInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SeriesSettingInformation) {
          return MergeFrom((SeriesSettingInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SeriesSettingInformation other) {
        if (other == global::McsfCommunication.SeriesSettingInformation.DefaultInstance) return this;
        if (other.HasEnableTransfSync) {
          EnableTransfSync = other.EnableTransfSync;
        }
        if (other.HasEnableSeriesPersist) {
          EnableSeriesPersist = other.EnableSeriesPersist;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              EnableTransfSync = input.ReadBool();
              break;
            }
            case 16: {
              EnableSeriesPersist = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasEnableTransfSync {
        get { return result.HasEnableTransfSync; }
      }
      public bool EnableTransfSync {
        get { return result.EnableTransfSync; }
        set { SetEnableTransfSync(value); }
      }
      public Builder SetEnableTransfSync(bool value) {
        result.hasEnableTransfSync = true;
        result.enableTransfSync_ = value;
        return this;
      }
      public Builder ClearEnableTransfSync() {
        result.hasEnableTransfSync = false;
        result.enableTransfSync_ = true;
        return this;
      }
      
      public bool HasEnableSeriesPersist {
        get { return result.HasEnableSeriesPersist; }
      }
      public bool EnableSeriesPersist {
        get { return result.EnableSeriesPersist; }
        set { SetEnableSeriesPersist(value); }
      }
      public Builder SetEnableSeriesPersist(bool value) {
        result.hasEnableSeriesPersist = true;
        result.enableSeriesPersist_ = value;
        return this;
      }
      public Builder ClearEnableSeriesPersist() {
        result.hasEnableSeriesPersist = false;
        result.enableSeriesPersist_ = true;
        return this;
      }
    }
    static SeriesSettingInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class SiteSettingInformation : pb::GeneratedMessage<SiteSettingInformation, SiteSettingInformation.Builder> {
    private static readonly SiteSettingInformation defaultInstance = new Builder().BuildPartial();
    public static SiteSettingInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SiteSettingInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SiteSettingInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_SiteSettingInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SiteSettingInformation, SiteSettingInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_SiteSettingInformation__FieldAccessorTable; }
    }
    
    public const int SiteSettingTypeFieldNumber = 1;
    private bool hasSiteSettingType;
    private global::McsfCommunication.SiteSettingType siteSettingType_ = global::McsfCommunication.SiteSettingType.SiteCommentSettingsType;
    public bool HasSiteSettingType {
      get { return hasSiteSettingType; }
    }
    public global::McsfCommunication.SiteSettingType SiteSettingType {
      get { return siteSettingType_; }
    }
    
    public const int SiteSettingContentFieldNumber = 2;
    private bool hasSiteSettingContent;
    private global::McsfCommunication.SiteSettingContent siteSettingContent_ = global::McsfCommunication.SiteSettingContent.DefaultInstance;
    public bool HasSiteSettingContent {
      get { return hasSiteSettingContent; }
    }
    public global::McsfCommunication.SiteSettingContent SiteSettingContent {
      get { return siteSettingContent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSiteSettingType) return false;
        if (!hasSiteSettingContent) return false;
        if (!SiteSettingContent.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSiteSettingType) {
        output.WriteEnum(1, (int) SiteSettingType);
      }
      if (HasSiteSettingContent) {
        output.WriteMessage(2, SiteSettingContent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSiteSettingType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) SiteSettingType);
        }
        if (HasSiteSettingContent) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SiteSettingContent);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SiteSettingInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SiteSettingInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SiteSettingInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SiteSettingInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SiteSettingInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SiteSettingInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SiteSettingInformation result = new SiteSettingInformation();
      
      protected override SiteSettingInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SiteSettingInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.SiteSettingInformation.Descriptor; }
      }
      
      public override SiteSettingInformation DefaultInstanceForType {
        get { return global::McsfCommunication.SiteSettingInformation.DefaultInstance; }
      }
      
      public override SiteSettingInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SiteSettingInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SiteSettingInformation) {
          return MergeFrom((SiteSettingInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SiteSettingInformation other) {
        if (other == global::McsfCommunication.SiteSettingInformation.DefaultInstance) return this;
        if (other.HasSiteSettingType) {
          SiteSettingType = other.SiteSettingType;
        }
        if (other.HasSiteSettingContent) {
          MergeSiteSettingContent(other.SiteSettingContent);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::McsfCommunication.SiteSettingType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                SiteSettingType = (global::McsfCommunication.SiteSettingType) rawValue;
              }
              break;
            }
            case 18: {
              global::McsfCommunication.SiteSettingContent.Builder subBuilder = global::McsfCommunication.SiteSettingContent.CreateBuilder();
              if (HasSiteSettingContent) {
                subBuilder.MergeFrom(SiteSettingContent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SiteSettingContent = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasSiteSettingType {
       get { return result.HasSiteSettingType; }
      }
      public global::McsfCommunication.SiteSettingType SiteSettingType {
        get { return result.SiteSettingType; }
        set { SetSiteSettingType(value); }
      }
      public Builder SetSiteSettingType(global::McsfCommunication.SiteSettingType value) {
        result.hasSiteSettingType = true;
        result.siteSettingType_ = value;
        return this;
      }
      public Builder ClearSiteSettingType() {
        result.hasSiteSettingType = false;
        result.siteSettingType_ = global::McsfCommunication.SiteSettingType.SiteCommentSettingsType;
        return this;
      }
      
      public bool HasSiteSettingContent {
       get { return result.HasSiteSettingContent; }
      }
      public global::McsfCommunication.SiteSettingContent SiteSettingContent {
        get { return result.SiteSettingContent; }
        set { SetSiteSettingContent(value); }
      }
      public Builder SetSiteSettingContent(global::McsfCommunication.SiteSettingContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSiteSettingContent = true;
        result.siteSettingContent_ = value;
        return this;
      }
      public Builder SetSiteSettingContent(global::McsfCommunication.SiteSettingContent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSiteSettingContent = true;
        result.siteSettingContent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSiteSettingContent(global::McsfCommunication.SiteSettingContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSiteSettingContent &&
            result.siteSettingContent_ != global::McsfCommunication.SiteSettingContent.DefaultInstance) {
            result.siteSettingContent_ = global::McsfCommunication.SiteSettingContent.CreateBuilder(result.siteSettingContent_).MergeFrom(value).BuildPartial();
        } else {
          result.siteSettingContent_ = value;
        }
        result.hasSiteSettingContent = true;
        return this;
      }
      public Builder ClearSiteSettingContent() {
        result.hasSiteSettingContent = false;
        result.siteSettingContent_ = global::McsfCommunication.SiteSettingContent.DefaultInstance;
        return this;
      }
    }
    static SiteSettingInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class SiteSettingContent : pb::GeneratedMessage<SiteSettingContent, SiteSettingContent.Builder> {
    private static readonly SiteSettingContent defaultInstance = new Builder().BuildPartial();
    public static SiteSettingContent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SiteSettingContent DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SiteSettingContent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_SiteSettingContent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SiteSettingContent, SiteSettingContent.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_SiteSettingContent__FieldAccessorTable; }
    }
    
    public const int MessageIndexFieldNumber = 1;
    private bool hasMessageIndex;
    private int messageIndex_ = 0;
    public bool HasMessageIndex {
      get { return hasMessageIndex; }
    }
    public int MessageIndex {
      get { return messageIndex_; }
    }
    
    public const int MessageSizeFieldNumber = 2;
    private bool hasMessageSize;
    private int messageSize_ = 0;
    public bool HasMessageSize {
      get { return hasMessageSize; }
    }
    public int MessageSize {
      get { return messageSize_; }
    }
    
    public const int MessageContentFieldNumber = 3;
    private bool hasMessageContent;
    private pb::ByteString messageContent_ = pb::ByteString.Empty;
    public bool HasMessageContent {
      get { return hasMessageContent; }
    }
    public pb::ByteString MessageContent {
      get { return messageContent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageIndex) return false;
        if (!hasMessageSize) return false;
        if (!hasMessageContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasMessageIndex) {
        output.WriteInt32(1, MessageIndex);
      }
      if (HasMessageSize) {
        output.WriteInt32(2, MessageSize);
      }
      if (HasMessageContent) {
        output.WriteBytes(3, MessageContent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasMessageIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageIndex);
        }
        if (HasMessageSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MessageSize);
        }
        if (HasMessageContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, MessageContent);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SiteSettingContent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SiteSettingContent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SiteSettingContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SiteSettingContent ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SiteSettingContent prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SiteSettingContent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SiteSettingContent result = new SiteSettingContent();
      
      protected override SiteSettingContent MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SiteSettingContent();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.SiteSettingContent.Descriptor; }
      }
      
      public override SiteSettingContent DefaultInstanceForType {
        get { return global::McsfCommunication.SiteSettingContent.DefaultInstance; }
      }
      
      public override SiteSettingContent BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SiteSettingContent returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SiteSettingContent) {
          return MergeFrom((SiteSettingContent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SiteSettingContent other) {
        if (other == global::McsfCommunication.SiteSettingContent.DefaultInstance) return this;
        if (other.HasMessageIndex) {
          MessageIndex = other.MessageIndex;
        }
        if (other.HasMessageSize) {
          MessageSize = other.MessageSize;
        }
        if (other.HasMessageContent) {
          MessageContent = other.MessageContent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              MessageIndex = input.ReadInt32();
              break;
            }
            case 16: {
              MessageSize = input.ReadInt32();
              break;
            }
            case 26: {
              MessageContent = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasMessageIndex {
        get { return result.HasMessageIndex; }
      }
      public int MessageIndex {
        get { return result.MessageIndex; }
        set { SetMessageIndex(value); }
      }
      public Builder SetMessageIndex(int value) {
        result.hasMessageIndex = true;
        result.messageIndex_ = value;
        return this;
      }
      public Builder ClearMessageIndex() {
        result.hasMessageIndex = false;
        result.messageIndex_ = 0;
        return this;
      }
      
      public bool HasMessageSize {
        get { return result.HasMessageSize; }
      }
      public int MessageSize {
        get { return result.MessageSize; }
        set { SetMessageSize(value); }
      }
      public Builder SetMessageSize(int value) {
        result.hasMessageSize = true;
        result.messageSize_ = value;
        return this;
      }
      public Builder ClearMessageSize() {
        result.hasMessageSize = false;
        result.messageSize_ = 0;
        return this;
      }
      
      public bool HasMessageContent {
        get { return result.HasMessageContent; }
      }
      public pb::ByteString MessageContent {
        get { return result.MessageContent; }
        set { SetMessageContent(value); }
      }
      public Builder SetMessageContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessageContent = true;
        result.messageContent_ = value;
        return this;
      }
      public Builder ClearMessageContent() {
        result.hasMessageContent = false;
        result.messageContent_ = pb::ByteString.Empty;
        return this;
      }
    }
    static SiteSettingContent() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class MouseInformation : pb::GeneratedMessage<MouseInformation, MouseInformation.Builder> {
    private static readonly MouseInformation defaultInstance = new Builder().BuildPartial();
    public static MouseInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MouseInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MouseInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_MouseInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MouseInformation, MouseInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_MouseInformation__FieldAccessorTable; }
    }
    
    public const int PointXFieldNumber = 1;
    private bool hasPointX;
    private int pointX_ = 0;
    public bool HasPointX {
      get { return hasPointX; }
    }
    public int PointX {
      get { return pointX_; }
    }
    
    public const int PointYFieldNumber = 2;
    private bool hasPointY;
    private int pointY_ = 0;
    public bool HasPointY {
      get { return hasPointY; }
    }
    public int PointY {
      get { return pointY_; }
    }
    
    public const int LeftDownFieldNumber = 3;
    private bool hasLeftDown;
    private bool leftDown_ = false;
    public bool HasLeftDown {
      get { return hasLeftDown; }
    }
    public bool LeftDown {
      get { return leftDown_; }
    }
    
    public const int RightDownFieldNumber = 4;
    private bool hasRightDown;
    private bool rightDown_ = false;
    public bool HasRightDown {
      get { return hasRightDown; }
    }
    public bool RightDown {
      get { return rightDown_; }
    }
    
    public const int MidRollerDownFieldNumber = 5;
    private bool hasMidRollerDown;
    private bool midRollerDown_ = false;
    public bool HasMidRollerDown {
      get { return hasMidRollerDown; }
    }
    public bool MidRollerDown {
      get { return midRollerDown_; }
    }
    
    public const int MidRollerMoveFieldNumber = 6;
    private bool hasMidRollerMove;
    private bool midRollerMove_ = false;
    public bool HasMidRollerMove {
      get { return hasMidRollerMove; }
    }
    public bool MidRollerMove {
      get { return midRollerMove_; }
    }
    
    public const int BehaviorTypeFieldNumber = 7;
    private bool hasBehaviorType;
    private int behaviorType_ = 0;
    public bool HasBehaviorType {
      get { return hasBehaviorType; }
    }
    public int BehaviorType {
      get { return behaviorType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPointX) return false;
        if (!hasPointY) return false;
        if (!hasLeftDown) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasPointX) {
        output.WriteInt32(1, PointX);
      }
      if (HasPointY) {
        output.WriteInt32(2, PointY);
      }
      if (HasLeftDown) {
        output.WriteBool(3, LeftDown);
      }
      if (HasRightDown) {
        output.WriteBool(4, RightDown);
      }
      if (HasMidRollerDown) {
        output.WriteBool(5, MidRollerDown);
      }
      if (HasMidRollerMove) {
        output.WriteBool(6, MidRollerMove);
      }
      if (HasBehaviorType) {
        output.WriteInt32(7, BehaviorType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasPointX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, PointX);
        }
        if (HasPointY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, PointY);
        }
        if (HasLeftDown) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, LeftDown);
        }
        if (HasRightDown) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, RightDown);
        }
        if (HasMidRollerDown) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, MidRollerDown);
        }
        if (HasMidRollerMove) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, MidRollerMove);
        }
        if (HasBehaviorType) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, BehaviorType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MouseInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MouseInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MouseInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MouseInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MouseInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MouseInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MouseInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MouseInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MouseInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MouseInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MouseInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MouseInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MouseInformation result = new MouseInformation();
      
      protected override MouseInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MouseInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.MouseInformation.Descriptor; }
      }
      
      public override MouseInformation DefaultInstanceForType {
        get { return global::McsfCommunication.MouseInformation.DefaultInstance; }
      }
      
      public override MouseInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        MouseInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MouseInformation) {
          return MergeFrom((MouseInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MouseInformation other) {
        if (other == global::McsfCommunication.MouseInformation.DefaultInstance) return this;
        if (other.HasPointX) {
          PointX = other.PointX;
        }
        if (other.HasPointY) {
          PointY = other.PointY;
        }
        if (other.HasLeftDown) {
          LeftDown = other.LeftDown;
        }
        if (other.HasRightDown) {
          RightDown = other.RightDown;
        }
        if (other.HasMidRollerDown) {
          MidRollerDown = other.MidRollerDown;
        }
        if (other.HasMidRollerMove) {
          MidRollerMove = other.MidRollerMove;
        }
        if (other.HasBehaviorType) {
          BehaviorType = other.BehaviorType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              PointX = input.ReadInt32();
              break;
            }
            case 16: {
              PointY = input.ReadInt32();
              break;
            }
            case 24: {
              LeftDown = input.ReadBool();
              break;
            }
            case 32: {
              RightDown = input.ReadBool();
              break;
            }
            case 40: {
              MidRollerDown = input.ReadBool();
              break;
            }
            case 48: {
              MidRollerMove = input.ReadBool();
              break;
            }
            case 56: {
              BehaviorType = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasPointX {
        get { return result.HasPointX; }
      }
      public int PointX {
        get { return result.PointX; }
        set { SetPointX(value); }
      }
      public Builder SetPointX(int value) {
        result.hasPointX = true;
        result.pointX_ = value;
        return this;
      }
      public Builder ClearPointX() {
        result.hasPointX = false;
        result.pointX_ = 0;
        return this;
      }
      
      public bool HasPointY {
        get { return result.HasPointY; }
      }
      public int PointY {
        get { return result.PointY; }
        set { SetPointY(value); }
      }
      public Builder SetPointY(int value) {
        result.hasPointY = true;
        result.pointY_ = value;
        return this;
      }
      public Builder ClearPointY() {
        result.hasPointY = false;
        result.pointY_ = 0;
        return this;
      }
      
      public bool HasLeftDown {
        get { return result.HasLeftDown; }
      }
      public bool LeftDown {
        get { return result.LeftDown; }
        set { SetLeftDown(value); }
      }
      public Builder SetLeftDown(bool value) {
        result.hasLeftDown = true;
        result.leftDown_ = value;
        return this;
      }
      public Builder ClearLeftDown() {
        result.hasLeftDown = false;
        result.leftDown_ = false;
        return this;
      }
      
      public bool HasRightDown {
        get { return result.HasRightDown; }
      }
      public bool RightDown {
        get { return result.RightDown; }
        set { SetRightDown(value); }
      }
      public Builder SetRightDown(bool value) {
        result.hasRightDown = true;
        result.rightDown_ = value;
        return this;
      }
      public Builder ClearRightDown() {
        result.hasRightDown = false;
        result.rightDown_ = false;
        return this;
      }
      
      public bool HasMidRollerDown {
        get { return result.HasMidRollerDown; }
      }
      public bool MidRollerDown {
        get { return result.MidRollerDown; }
        set { SetMidRollerDown(value); }
      }
      public Builder SetMidRollerDown(bool value) {
        result.hasMidRollerDown = true;
        result.midRollerDown_ = value;
        return this;
      }
      public Builder ClearMidRollerDown() {
        result.hasMidRollerDown = false;
        result.midRollerDown_ = false;
        return this;
      }
      
      public bool HasMidRollerMove {
        get { return result.HasMidRollerMove; }
      }
      public bool MidRollerMove {
        get { return result.MidRollerMove; }
        set { SetMidRollerMove(value); }
      }
      public Builder SetMidRollerMove(bool value) {
        result.hasMidRollerMove = true;
        result.midRollerMove_ = value;
        return this;
      }
      public Builder ClearMidRollerMove() {
        result.hasMidRollerMove = false;
        result.midRollerMove_ = false;
        return this;
      }
      
      public bool HasBehaviorType {
        get { return result.HasBehaviorType; }
      }
      public int BehaviorType {
        get { return result.BehaviorType; }
        set { SetBehaviorType(value); }
      }
      public Builder SetBehaviorType(int value) {
        result.hasBehaviorType = true;
        result.behaviorType_ = value;
        return this;
      }
      public Builder ClearBehaviorType() {
        result.hasBehaviorType = false;
        result.behaviorType_ = 0;
        return this;
      }
    }
    static MouseInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class KeyboardInformation : pb::GeneratedMessage<KeyboardInformation, KeyboardInformation.Builder> {
    private static readonly KeyboardInformation defaultInstance = new Builder().BuildPartial();
    public static KeyboardInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KeyboardInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override KeyboardInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_KeyboardInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KeyboardInformation, KeyboardInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_KeyboardInformation__FieldAccessorTable; }
    }
    
    public const int KeyValFieldNumber = 1;
    private bool hasKeyVal;
    private string keyVal_ = "";
    public bool HasKeyVal {
      get { return hasKeyVal; }
    }
    public string KeyVal {
      get { return keyVal_; }
    }
    
    public const int CtrlPressedFieldNumber = 2;
    private bool hasCtrlPressed;
    private bool ctrlPressed_ = false;
    public bool HasCtrlPressed {
      get { return hasCtrlPressed; }
    }
    public bool CtrlPressed {
      get { return ctrlPressed_; }
    }
    
    public const int ShiftPressedFieldNumber = 3;
    private bool hasShiftPressed;
    private bool shiftPressed_ = false;
    public bool HasShiftPressed {
      get { return hasShiftPressed; }
    }
    public bool ShiftPressed {
      get { return shiftPressed_; }
    }
    
    public const int AltPressedFieldNumber = 4;
    private bool hasAltPressed;
    private bool altPressed_ = false;
    public bool HasAltPressed {
      get { return hasAltPressed; }
    }
    public bool AltPressed {
      get { return altPressed_; }
    }
    
    public const int FeatureKeyFieldNumber = 5;
    private bool hasFeatureKey;
    private global::McsfCommunication.KeyboardFeatureKeyType featureKey_ = global::McsfCommunication.KeyboardFeatureKeyType.FK_None;
    public bool HasFeatureKey {
      get { return hasFeatureKey; }
    }
    public global::McsfCommunication.KeyboardFeatureKeyType FeatureKey {
      get { return featureKey_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKeyVal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKeyVal) {
        output.WriteString(1, KeyVal);
      }
      if (HasCtrlPressed) {
        output.WriteBool(2, CtrlPressed);
      }
      if (HasShiftPressed) {
        output.WriteBool(3, ShiftPressed);
      }
      if (HasAltPressed) {
        output.WriteBool(4, AltPressed);
      }
      if (HasFeatureKey) {
        output.WriteEnum(5, (int) FeatureKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKeyVal) {
          size += pb::CodedOutputStream.ComputeStringSize(1, KeyVal);
        }
        if (HasCtrlPressed) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, CtrlPressed);
        }
        if (HasShiftPressed) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, ShiftPressed);
        }
        if (HasAltPressed) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, AltPressed);
        }
        if (HasFeatureKey) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) FeatureKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KeyboardInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KeyboardInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KeyboardInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KeyboardInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KeyboardInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<KeyboardInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      KeyboardInformation result = new KeyboardInformation();
      
      protected override KeyboardInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new KeyboardInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.KeyboardInformation.Descriptor; }
      }
      
      public override KeyboardInformation DefaultInstanceForType {
        get { return global::McsfCommunication.KeyboardInformation.DefaultInstance; }
      }
      
      public override KeyboardInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        KeyboardInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KeyboardInformation) {
          return MergeFrom((KeyboardInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KeyboardInformation other) {
        if (other == global::McsfCommunication.KeyboardInformation.DefaultInstance) return this;
        if (other.HasKeyVal) {
          KeyVal = other.KeyVal;
        }
        if (other.HasCtrlPressed) {
          CtrlPressed = other.CtrlPressed;
        }
        if (other.HasShiftPressed) {
          ShiftPressed = other.ShiftPressed;
        }
        if (other.HasAltPressed) {
          AltPressed = other.AltPressed;
        }
        if (other.HasFeatureKey) {
          FeatureKey = other.FeatureKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              KeyVal = input.ReadString();
              break;
            }
            case 16: {
              CtrlPressed = input.ReadBool();
              break;
            }
            case 24: {
              ShiftPressed = input.ReadBool();
              break;
            }
            case 32: {
              AltPressed = input.ReadBool();
              break;
            }
            case 40: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::McsfCommunication.KeyboardFeatureKeyType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong) rawValue);
              } else {
                FeatureKey = (global::McsfCommunication.KeyboardFeatureKeyType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasKeyVal {
        get { return result.HasKeyVal; }
      }
      public string KeyVal {
        get { return result.KeyVal; }
        set { SetKeyVal(value); }
      }
      public Builder SetKeyVal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasKeyVal = true;
        result.keyVal_ = value;
        return this;
      }
      public Builder ClearKeyVal() {
        result.hasKeyVal = false;
        result.keyVal_ = "";
        return this;
      }
      
      public bool HasCtrlPressed {
        get { return result.HasCtrlPressed; }
      }
      public bool CtrlPressed {
        get { return result.CtrlPressed; }
        set { SetCtrlPressed(value); }
      }
      public Builder SetCtrlPressed(bool value) {
        result.hasCtrlPressed = true;
        result.ctrlPressed_ = value;
        return this;
      }
      public Builder ClearCtrlPressed() {
        result.hasCtrlPressed = false;
        result.ctrlPressed_ = false;
        return this;
      }
      
      public bool HasShiftPressed {
        get { return result.HasShiftPressed; }
      }
      public bool ShiftPressed {
        get { return result.ShiftPressed; }
        set { SetShiftPressed(value); }
      }
      public Builder SetShiftPressed(bool value) {
        result.hasShiftPressed = true;
        result.shiftPressed_ = value;
        return this;
      }
      public Builder ClearShiftPressed() {
        result.hasShiftPressed = false;
        result.shiftPressed_ = false;
        return this;
      }
      
      public bool HasAltPressed {
        get { return result.HasAltPressed; }
      }
      public bool AltPressed {
        get { return result.AltPressed; }
        set { SetAltPressed(value); }
      }
      public Builder SetAltPressed(bool value) {
        result.hasAltPressed = true;
        result.altPressed_ = value;
        return this;
      }
      public Builder ClearAltPressed() {
        result.hasAltPressed = false;
        result.altPressed_ = false;
        return this;
      }
      
      public bool HasFeatureKey {
       get { return result.HasFeatureKey; }
      }
      public global::McsfCommunication.KeyboardFeatureKeyType FeatureKey {
        get { return result.FeatureKey; }
        set { SetFeatureKey(value); }
      }
      public Builder SetFeatureKey(global::McsfCommunication.KeyboardFeatureKeyType value) {
        result.hasFeatureKey = true;
        result.featureKey_ = value;
        return this;
      }
      public Builder ClearFeatureKey() {
        result.hasFeatureKey = false;
        result.featureKey_ = global::McsfCommunication.KeyboardFeatureKeyType.FK_None;
        return this;
      }
    }
    static KeyboardInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ScaleToolInformation : pb::GeneratedMessage<ScaleToolInformation, ScaleToolInformation.Builder> {
    private static readonly ScaleToolInformation defaultInstance = new Builder().BuildPartial();
    public static ScaleToolInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ScaleToolInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ScaleToolInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ScaleToolInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ScaleToolInformation, ScaleToolInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ScaleToolInformation__FieldAccessorTable; }
    }
    
    public const int ScaleXFactorFieldNumber = 1;
    private bool hasScaleXFactor;
    private double scaleXFactor_ = 0D;
    public bool HasScaleXFactor {
      get { return hasScaleXFactor; }
    }
    public double ScaleXFactor {
      get { return scaleXFactor_; }
    }
    
    public const int ScaleYFactorFieldNumber = 2;
    private bool hasScaleYFactor;
    private double scaleYFactor_ = 0D;
    public bool HasScaleYFactor {
      get { return hasScaleYFactor; }
    }
    public double ScaleYFactor {
      get { return scaleYFactor_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasScaleXFactor) return false;
        if (!hasScaleYFactor) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasScaleXFactor) {
        output.WriteDouble(1, ScaleXFactor);
      }
      if (HasScaleYFactor) {
        output.WriteDouble(2, ScaleYFactor);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasScaleXFactor) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, ScaleXFactor);
        }
        if (HasScaleYFactor) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, ScaleYFactor);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ScaleToolInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ScaleToolInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ScaleToolInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScaleToolInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ScaleToolInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ScaleToolInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ScaleToolInformation result = new ScaleToolInformation();
      
      protected override ScaleToolInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ScaleToolInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ScaleToolInformation.Descriptor; }
      }
      
      public override ScaleToolInformation DefaultInstanceForType {
        get { return global::McsfCommunication.ScaleToolInformation.DefaultInstance; }
      }
      
      public override ScaleToolInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ScaleToolInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ScaleToolInformation) {
          return MergeFrom((ScaleToolInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ScaleToolInformation other) {
        if (other == global::McsfCommunication.ScaleToolInformation.DefaultInstance) return this;
        if (other.HasScaleXFactor) {
          ScaleXFactor = other.ScaleXFactor;
        }
        if (other.HasScaleYFactor) {
          ScaleYFactor = other.ScaleYFactor;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              ScaleXFactor = input.ReadDouble();
              break;
            }
            case 17: {
              ScaleYFactor = input.ReadDouble();
              break;
            }
          }
        }
      }
      
      
      public bool HasScaleXFactor {
        get { return result.HasScaleXFactor; }
      }
      public double ScaleXFactor {
        get { return result.ScaleXFactor; }
        set { SetScaleXFactor(value); }
      }
      public Builder SetScaleXFactor(double value) {
        result.hasScaleXFactor = true;
        result.scaleXFactor_ = value;
        return this;
      }
      public Builder ClearScaleXFactor() {
        result.hasScaleXFactor = false;
        result.scaleXFactor_ = 0D;
        return this;
      }
      
      public bool HasScaleYFactor {
        get { return result.HasScaleYFactor; }
      }
      public double ScaleYFactor {
        get { return result.ScaleYFactor; }
        set { SetScaleYFactor(value); }
      }
      public Builder SetScaleYFactor(double value) {
        result.hasScaleYFactor = true;
        result.scaleYFactor_ = value;
        return this;
      }
      public Builder ClearScaleYFactor() {
        result.hasScaleYFactor = false;
        result.scaleYFactor_ = 0D;
        return this;
      }
    }
    static ScaleToolInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class RotateInformation : pb::GeneratedMessage<RotateInformation, RotateInformation.Builder> {
    private static readonly RotateInformation defaultInstance = new Builder().BuildPartial();
    public static RotateInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RotateInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RotateInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_RotateInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RotateInformation, RotateInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_RotateInformation__FieldAccessorTable; }
    }
    
    public const int AngleFieldNumber = 1;
    private bool hasAngle;
    private double angle_ = 0D;
    public bool HasAngle {
      get { return hasAngle; }
    }
    public double Angle {
      get { return angle_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAngle) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAngle) {
        output.WriteDouble(1, Angle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAngle) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Angle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RotateInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RotateInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RotateInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RotateInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RotateInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RotateInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RotateInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RotateInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RotateInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RotateInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RotateInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RotateInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RotateInformation result = new RotateInformation();
      
      protected override RotateInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RotateInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.RotateInformation.Descriptor; }
      }
      
      public override RotateInformation DefaultInstanceForType {
        get { return global::McsfCommunication.RotateInformation.DefaultInstance; }
      }
      
      public override RotateInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RotateInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RotateInformation) {
          return MergeFrom((RotateInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RotateInformation other) {
        if (other == global::McsfCommunication.RotateInformation.DefaultInstance) return this;
        if (other.HasAngle) {
          Angle = other.Angle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              Angle = input.ReadDouble();
              break;
            }
          }
        }
      }
      
      
      public bool HasAngle {
        get { return result.HasAngle; }
      }
      public double Angle {
        get { return result.Angle; }
        set { SetAngle(value); }
      }
      public Builder SetAngle(double value) {
        result.hasAngle = true;
        result.angle_ = value;
        return this;
      }
      public Builder ClearAngle() {
        result.hasAngle = false;
        result.angle_ = 0D;
        return this;
      }
    }
    static RotateInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class WinWidthCenterInformation : pb::GeneratedMessage<WinWidthCenterInformation, WinWidthCenterInformation.Builder> {
    private static readonly WinWidthCenterInformation defaultInstance = new Builder().BuildPartial();
    public static WinWidthCenterInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WinWidthCenterInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override WinWidthCenterInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_WinWidthCenterInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WinWidthCenterInformation, WinWidthCenterInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_WinWidthCenterInformation__FieldAccessorTable; }
    }
    
    public const int WinWidthFieldNumber = 1;
    private bool hasWinWidth;
    private double winWidth_ = 0D;
    public bool HasWinWidth {
      get { return hasWinWidth; }
    }
    public double WinWidth {
      get { return winWidth_; }
    }
    
    public const int WinCenterFieldNumber = 2;
    private bool hasWinCenter;
    private double winCenter_ = 0D;
    public bool HasWinCenter {
      get { return hasWinCenter; }
    }
    public double WinCenter {
      get { return winCenter_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWinWidth) return false;
        if (!hasWinCenter) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasWinWidth) {
        output.WriteDouble(1, WinWidth);
      }
      if (HasWinCenter) {
        output.WriteDouble(2, WinCenter);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasWinWidth) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, WinWidth);
        }
        if (HasWinCenter) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, WinCenter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WinWidthCenterInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WinWidthCenterInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WinWidthCenterInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WinWidthCenterInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<WinWidthCenterInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      WinWidthCenterInformation result = new WinWidthCenterInformation();
      
      protected override WinWidthCenterInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new WinWidthCenterInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.WinWidthCenterInformation.Descriptor; }
      }
      
      public override WinWidthCenterInformation DefaultInstanceForType {
        get { return global::McsfCommunication.WinWidthCenterInformation.DefaultInstance; }
      }
      
      public override WinWidthCenterInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        WinWidthCenterInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WinWidthCenterInformation) {
          return MergeFrom((WinWidthCenterInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WinWidthCenterInformation other) {
        if (other == global::McsfCommunication.WinWidthCenterInformation.DefaultInstance) return this;
        if (other.HasWinWidth) {
          WinWidth = other.WinWidth;
        }
        if (other.HasWinCenter) {
          WinCenter = other.WinCenter;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              WinWidth = input.ReadDouble();
              break;
            }
            case 17: {
              WinCenter = input.ReadDouble();
              break;
            }
          }
        }
      }
      
      
      public bool HasWinWidth {
        get { return result.HasWinWidth; }
      }
      public double WinWidth {
        get { return result.WinWidth; }
        set { SetWinWidth(value); }
      }
      public Builder SetWinWidth(double value) {
        result.hasWinWidth = true;
        result.winWidth_ = value;
        return this;
      }
      public Builder ClearWinWidth() {
        result.hasWinWidth = false;
        result.winWidth_ = 0D;
        return this;
      }
      
      public bool HasWinCenter {
        get { return result.HasWinCenter; }
      }
      public double WinCenter {
        get { return result.WinCenter; }
        set { SetWinCenter(value); }
      }
      public Builder SetWinCenter(double value) {
        result.hasWinCenter = true;
        result.winCenter_ = value;
        return this;
      }
      public Builder ClearWinCenter() {
        result.hasWinCenter = false;
        result.winCenter_ = 0D;
        return this;
      }
    }
    static WinWidthCenterInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class LocalizerLinesResource : pb::GeneratedMessage<LocalizerLinesResource, LocalizerLinesResource.Builder> {
    private static readonly LocalizerLinesResource defaultInstance = new Builder().BuildPartial();
    public static LocalizerLinesResource DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LocalizerLinesResource DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override LocalizerLinesResource ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_LocalizerLinesResource__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LocalizerLinesResource, LocalizerLinesResource.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_LocalizerLinesResource__FieldAccessorTable; }
    }
    
    public const int ResourceIdFieldNumber = 1;
    private bool hasResourceId;
    private int resourceId_ = 0;
    public bool HasResourceId {
      get { return hasResourceId; }
    }
    public int ResourceId {
      get { return resourceId_; }
    }
    
    public const int IsReferringSideFieldNumber = 2;
    private bool hasIsReferringSide;
    private bool isReferringSide_ = true;
    public bool HasIsReferringSide {
      get { return hasIsReferringSide; }
    }
    public bool IsReferringSide {
      get { return isReferringSide_; }
    }
    
    public const int OperationFieldNumber = 3;
    private bool hasOperation;
    private int operation_ = 0;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public int Operation {
      get { return operation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResourceId) return false;
        if (!hasIsReferringSide) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasResourceId) {
        output.WriteInt32(1, ResourceId);
      }
      if (HasIsReferringSide) {
        output.WriteBool(2, IsReferringSide);
      }
      if (HasOperation) {
        output.WriteInt32(3, Operation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasResourceId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ResourceId);
        }
        if (HasIsReferringSide) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsReferringSide);
        }
        if (HasOperation) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Operation);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LocalizerLinesResource ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LocalizerLinesResource ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LocalizerLinesResource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LocalizerLinesResource ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LocalizerLinesResource prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<LocalizerLinesResource, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      LocalizerLinesResource result = new LocalizerLinesResource();
      
      protected override LocalizerLinesResource MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new LocalizerLinesResource();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.LocalizerLinesResource.Descriptor; }
      }
      
      public override LocalizerLinesResource DefaultInstanceForType {
        get { return global::McsfCommunication.LocalizerLinesResource.DefaultInstance; }
      }
      
      public override LocalizerLinesResource BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        LocalizerLinesResource returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LocalizerLinesResource) {
          return MergeFrom((LocalizerLinesResource) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LocalizerLinesResource other) {
        if (other == global::McsfCommunication.LocalizerLinesResource.DefaultInstance) return this;
        if (other.HasResourceId) {
          ResourceId = other.ResourceId;
        }
        if (other.HasIsReferringSide) {
          IsReferringSide = other.IsReferringSide;
        }
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ResourceId = input.ReadInt32();
              break;
            }
            case 16: {
              IsReferringSide = input.ReadBool();
              break;
            }
            case 24: {
              Operation = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasResourceId {
        get { return result.HasResourceId; }
      }
      public int ResourceId {
        get { return result.ResourceId; }
        set { SetResourceId(value); }
      }
      public Builder SetResourceId(int value) {
        result.hasResourceId = true;
        result.resourceId_ = value;
        return this;
      }
      public Builder ClearResourceId() {
        result.hasResourceId = false;
        result.resourceId_ = 0;
        return this;
      }
      
      public bool HasIsReferringSide {
        get { return result.HasIsReferringSide; }
      }
      public bool IsReferringSide {
        get { return result.IsReferringSide; }
        set { SetIsReferringSide(value); }
      }
      public Builder SetIsReferringSide(bool value) {
        result.hasIsReferringSide = true;
        result.isReferringSide_ = value;
        return this;
      }
      public Builder ClearIsReferringSide() {
        result.hasIsReferringSide = false;
        result.isReferringSide_ = true;
        return this;
      }
      
      public bool HasOperation {
        get { return result.HasOperation; }
      }
      public int Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(int value) {
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        result.hasOperation = false;
        result.operation_ = 0;
        return this;
      }
    }
    static LocalizerLinesResource() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ToolInformation : pb::GeneratedMessage<ToolInformation, ToolInformation.Builder> {
    private static readonly ToolInformation defaultInstance = new Builder().BuildPartial();
    public static ToolInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToolInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ToolInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ToolInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToolInformation, ToolInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ToolInformation__FieldAccessorTable; }
    }
    
    public const int ToolTypeFieldNumber = 1;
    private bool hasToolType;
    private global::McsfCommunication.ImageToolType toolType_ = global::McsfCommunication.ImageToolType.LineTool;
    public bool HasToolType {
      get { return hasToolType; }
    }
    public global::McsfCommunication.ImageToolType ToolType {
      get { return toolType_; }
    }
    
    public const int ScaleInformationFieldNumber = 2;
    private bool hasScaleInformation;
    private global::McsfCommunication.ScaleToolInformation scaleInformation_ = global::McsfCommunication.ScaleToolInformation.DefaultInstance;
    public bool HasScaleInformation {
      get { return hasScaleInformation; }
    }
    public global::McsfCommunication.ScaleToolInformation ScaleInformation {
      get { return scaleInformation_; }
    }
    
    public const int RotateInformationFieldNumber = 3;
    private bool hasRotateInformation;
    private global::McsfCommunication.RotateInformation rotateInformation_ = global::McsfCommunication.RotateInformation.DefaultInstance;
    public bool HasRotateInformation {
      get { return hasRotateInformation; }
    }
    public global::McsfCommunication.RotateInformation RotateInformation {
      get { return rotateInformation_; }
    }
    
    public const int WinWidthCenterInformationFieldNumber = 4;
    private bool hasWinWidthCenterInformation;
    private global::McsfCommunication.WinWidthCenterInformation winWidthCenterInformation_ = global::McsfCommunication.WinWidthCenterInformation.DefaultInstance;
    public bool HasWinWidthCenterInformation {
      get { return hasWinWidthCenterInformation; }
    }
    public global::McsfCommunication.WinWidthCenterInformation WinWidthCenterInformation {
      get { return winWidthCenterInformation_; }
    }
    
    public const int LocalizerLinesResourceFieldNumber = 5;
    private bool hasLocalizerLinesResource;
    private global::McsfCommunication.LocalizerLinesResource localizerLinesResource_ = global::McsfCommunication.LocalizerLinesResource.DefaultInstance;
    public bool HasLocalizerLinesResource {
      get { return hasLocalizerLinesResource; }
    }
    public global::McsfCommunication.LocalizerLinesResource LocalizerLinesResource {
      get { return localizerLinesResource_; }
    }
    
    public const int NoteObjectInformationFieldNumber = 6;
    private bool hasNoteObjectInformation;
    private global::McsfCommunication.NoteObjectInformation noteObjectInformation_ = global::McsfCommunication.NoteObjectInformation.DefaultInstance;
    public bool HasNoteObjectInformation {
      get { return hasNoteObjectInformation; }
    }
    public global::McsfCommunication.NoteObjectInformation NoteObjectInformation {
      get { return noteObjectInformation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToolType) return false;
        if (HasScaleInformation) {
          if (!ScaleInformation.IsInitialized) return false;
        }
        if (HasRotateInformation) {
          if (!RotateInformation.IsInitialized) return false;
        }
        if (HasWinWidthCenterInformation) {
          if (!WinWidthCenterInformation.IsInitialized) return false;
        }
        if (HasLocalizerLinesResource) {
          if (!LocalizerLinesResource.IsInitialized) return false;
        }
        if (HasNoteObjectInformation) {
          if (!NoteObjectInformation.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasToolType) {
        output.WriteEnum(1, (int) ToolType);
      }
      if (HasScaleInformation) {
        output.WriteMessage(2, ScaleInformation);
      }
      if (HasRotateInformation) {
        output.WriteMessage(3, RotateInformation);
      }
      if (HasWinWidthCenterInformation) {
        output.WriteMessage(4, WinWidthCenterInformation);
      }
      if (HasLocalizerLinesResource) {
        output.WriteMessage(5, LocalizerLinesResource);
      }
      if (HasNoteObjectInformation) {
        output.WriteMessage(6, NoteObjectInformation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasToolType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ToolType);
        }
        if (HasScaleInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ScaleInformation);
        }
        if (HasRotateInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, RotateInformation);
        }
        if (HasWinWidthCenterInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, WinWidthCenterInformation);
        }
        if (HasLocalizerLinesResource) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, LocalizerLinesResource);
        }
        if (HasNoteObjectInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, NoteObjectInformation);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToolInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToolInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToolInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToolInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToolInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToolInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToolInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToolInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToolInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToolInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToolInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ToolInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ToolInformation result = new ToolInformation();
      
      protected override ToolInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ToolInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ToolInformation.Descriptor; }
      }
      
      public override ToolInformation DefaultInstanceForType {
        get { return global::McsfCommunication.ToolInformation.DefaultInstance; }
      }
      
      public override ToolInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ToolInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToolInformation) {
          return MergeFrom((ToolInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToolInformation other) {
        if (other == global::McsfCommunication.ToolInformation.DefaultInstance) return this;
        if (other.HasToolType) {
          ToolType = other.ToolType;
        }
        if (other.HasScaleInformation) {
          MergeScaleInformation(other.ScaleInformation);
        }
        if (other.HasRotateInformation) {
          MergeRotateInformation(other.RotateInformation);
        }
        if (other.HasWinWidthCenterInformation) {
          MergeWinWidthCenterInformation(other.WinWidthCenterInformation);
        }
        if (other.HasLocalizerLinesResource) {
          MergeLocalizerLinesResource(other.LocalizerLinesResource);
        }
        if (other.HasNoteObjectInformation) {
          MergeNoteObjectInformation(other.NoteObjectInformation);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::McsfCommunication.ImageToolType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                ToolType = (global::McsfCommunication.ImageToolType) rawValue;
              }
              break;
            }
            case 18: {
              global::McsfCommunication.ScaleToolInformation.Builder subBuilder = global::McsfCommunication.ScaleToolInformation.CreateBuilder();
              if (HasScaleInformation) {
                subBuilder.MergeFrom(ScaleInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ScaleInformation = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::McsfCommunication.RotateInformation.Builder subBuilder = global::McsfCommunication.RotateInformation.CreateBuilder();
              if (HasRotateInformation) {
                subBuilder.MergeFrom(RotateInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RotateInformation = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::McsfCommunication.WinWidthCenterInformation.Builder subBuilder = global::McsfCommunication.WinWidthCenterInformation.CreateBuilder();
              if (HasWinWidthCenterInformation) {
                subBuilder.MergeFrom(WinWidthCenterInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              WinWidthCenterInformation = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::McsfCommunication.LocalizerLinesResource.Builder subBuilder = global::McsfCommunication.LocalizerLinesResource.CreateBuilder();
              if (HasLocalizerLinesResource) {
                subBuilder.MergeFrom(LocalizerLinesResource);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocalizerLinesResource = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::McsfCommunication.NoteObjectInformation.Builder subBuilder = global::McsfCommunication.NoteObjectInformation.CreateBuilder();
              if (HasNoteObjectInformation) {
                subBuilder.MergeFrom(NoteObjectInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NoteObjectInformation = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasToolType {
       get { return result.HasToolType; }
      }
      public global::McsfCommunication.ImageToolType ToolType {
        get { return result.ToolType; }
        set { SetToolType(value); }
      }
      public Builder SetToolType(global::McsfCommunication.ImageToolType value) {
        result.hasToolType = true;
        result.toolType_ = value;
        return this;
      }
      public Builder ClearToolType() {
        result.hasToolType = false;
        result.toolType_ = global::McsfCommunication.ImageToolType.LineTool;
        return this;
      }
      
      public bool HasScaleInformation {
       get { return result.HasScaleInformation; }
      }
      public global::McsfCommunication.ScaleToolInformation ScaleInformation {
        get { return result.ScaleInformation; }
        set { SetScaleInformation(value); }
      }
      public Builder SetScaleInformation(global::McsfCommunication.ScaleToolInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasScaleInformation = true;
        result.scaleInformation_ = value;
        return this;
      }
      public Builder SetScaleInformation(global::McsfCommunication.ScaleToolInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasScaleInformation = true;
        result.scaleInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScaleInformation(global::McsfCommunication.ScaleToolInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasScaleInformation &&
            result.scaleInformation_ != global::McsfCommunication.ScaleToolInformation.DefaultInstance) {
            result.scaleInformation_ = global::McsfCommunication.ScaleToolInformation.CreateBuilder(result.scaleInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.scaleInformation_ = value;
        }
        result.hasScaleInformation = true;
        return this;
      }
      public Builder ClearScaleInformation() {
        result.hasScaleInformation = false;
        result.scaleInformation_ = global::McsfCommunication.ScaleToolInformation.DefaultInstance;
        return this;
      }
      
      public bool HasRotateInformation {
       get { return result.HasRotateInformation; }
      }
      public global::McsfCommunication.RotateInformation RotateInformation {
        get { return result.RotateInformation; }
        set { SetRotateInformation(value); }
      }
      public Builder SetRotateInformation(global::McsfCommunication.RotateInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRotateInformation = true;
        result.rotateInformation_ = value;
        return this;
      }
      public Builder SetRotateInformation(global::McsfCommunication.RotateInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasRotateInformation = true;
        result.rotateInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRotateInformation(global::McsfCommunication.RotateInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasRotateInformation &&
            result.rotateInformation_ != global::McsfCommunication.RotateInformation.DefaultInstance) {
            result.rotateInformation_ = global::McsfCommunication.RotateInformation.CreateBuilder(result.rotateInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.rotateInformation_ = value;
        }
        result.hasRotateInformation = true;
        return this;
      }
      public Builder ClearRotateInformation() {
        result.hasRotateInformation = false;
        result.rotateInformation_ = global::McsfCommunication.RotateInformation.DefaultInstance;
        return this;
      }
      
      public bool HasWinWidthCenterInformation {
       get { return result.HasWinWidthCenterInformation; }
      }
      public global::McsfCommunication.WinWidthCenterInformation WinWidthCenterInformation {
        get { return result.WinWidthCenterInformation; }
        set { SetWinWidthCenterInformation(value); }
      }
      public Builder SetWinWidthCenterInformation(global::McsfCommunication.WinWidthCenterInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasWinWidthCenterInformation = true;
        result.winWidthCenterInformation_ = value;
        return this;
      }
      public Builder SetWinWidthCenterInformation(global::McsfCommunication.WinWidthCenterInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasWinWidthCenterInformation = true;
        result.winWidthCenterInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWinWidthCenterInformation(global::McsfCommunication.WinWidthCenterInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasWinWidthCenterInformation &&
            result.winWidthCenterInformation_ != global::McsfCommunication.WinWidthCenterInformation.DefaultInstance) {
            result.winWidthCenterInformation_ = global::McsfCommunication.WinWidthCenterInformation.CreateBuilder(result.winWidthCenterInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.winWidthCenterInformation_ = value;
        }
        result.hasWinWidthCenterInformation = true;
        return this;
      }
      public Builder ClearWinWidthCenterInformation() {
        result.hasWinWidthCenterInformation = false;
        result.winWidthCenterInformation_ = global::McsfCommunication.WinWidthCenterInformation.DefaultInstance;
        return this;
      }
      
      public bool HasLocalizerLinesResource {
       get { return result.HasLocalizerLinesResource; }
      }
      public global::McsfCommunication.LocalizerLinesResource LocalizerLinesResource {
        get { return result.LocalizerLinesResource; }
        set { SetLocalizerLinesResource(value); }
      }
      public Builder SetLocalizerLinesResource(global::McsfCommunication.LocalizerLinesResource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLocalizerLinesResource = true;
        result.localizerLinesResource_ = value;
        return this;
      }
      public Builder SetLocalizerLinesResource(global::McsfCommunication.LocalizerLinesResource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasLocalizerLinesResource = true;
        result.localizerLinesResource_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocalizerLinesResource(global::McsfCommunication.LocalizerLinesResource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasLocalizerLinesResource &&
            result.localizerLinesResource_ != global::McsfCommunication.LocalizerLinesResource.DefaultInstance) {
            result.localizerLinesResource_ = global::McsfCommunication.LocalizerLinesResource.CreateBuilder(result.localizerLinesResource_).MergeFrom(value).BuildPartial();
        } else {
          result.localizerLinesResource_ = value;
        }
        result.hasLocalizerLinesResource = true;
        return this;
      }
      public Builder ClearLocalizerLinesResource() {
        result.hasLocalizerLinesResource = false;
        result.localizerLinesResource_ = global::McsfCommunication.LocalizerLinesResource.DefaultInstance;
        return this;
      }
      
      public bool HasNoteObjectInformation {
       get { return result.HasNoteObjectInformation; }
      }
      public global::McsfCommunication.NoteObjectInformation NoteObjectInformation {
        get { return result.NoteObjectInformation; }
        set { SetNoteObjectInformation(value); }
      }
      public Builder SetNoteObjectInformation(global::McsfCommunication.NoteObjectInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNoteObjectInformation = true;
        result.noteObjectInformation_ = value;
        return this;
      }
      public Builder SetNoteObjectInformation(global::McsfCommunication.NoteObjectInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasNoteObjectInformation = true;
        result.noteObjectInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNoteObjectInformation(global::McsfCommunication.NoteObjectInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasNoteObjectInformation &&
            result.noteObjectInformation_ != global::McsfCommunication.NoteObjectInformation.DefaultInstance) {
            result.noteObjectInformation_ = global::McsfCommunication.NoteObjectInformation.CreateBuilder(result.noteObjectInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.noteObjectInformation_ = value;
        }
        result.hasNoteObjectInformation = true;
        return this;
      }
      public Builder ClearNoteObjectInformation() {
        result.hasNoteObjectInformation = false;
        result.noteObjectInformation_ = global::McsfCommunication.NoteObjectInformation.DefaultInstance;
        return this;
      }
    }
    static ToolInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ImageRequest : pb::GeneratedMessage<ImageRequest, ImageRequest.Builder> {
    private static readonly ImageRequest defaultInstance = new Builder().BuildPartial();
    public static ImageRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ImageRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ImageRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ImageRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ImageRequest, ImageRequest.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ImageRequest__FieldAccessorTable; }
    }
    
    public const int ImagePosIdFieldNumber = 1;
    private bool hasImagePosId;
    private global::McsfCommunication.ImagePosId imagePosId_ = global::McsfCommunication.ImagePosId.DefaultInstance;
    public bool HasImagePosId {
      get { return hasImagePosId; }
    }
    public global::McsfCommunication.ImagePosId ImagePosId {
      get { return imagePosId_; }
    }
    
    public const int OpenImageInformationFieldNumber = 2;
    private bool hasOpenImageInformation;
    private global::McsfCommunication.OpenImageInformation openImageInformation_ = global::McsfCommunication.OpenImageInformation.DefaultInstance;
    public bool HasOpenImageInformation {
      get { return hasOpenImageInformation; }
    }
    public global::McsfCommunication.OpenImageInformation OpenImageInformation {
      get { return openImageInformation_; }
    }
    
    public const int MouseInformationFieldNumber = 3;
    private bool hasMouseInformation;
    private global::McsfCommunication.MouseInformation mouseInformation_ = global::McsfCommunication.MouseInformation.DefaultInstance;
    public bool HasMouseInformation {
      get { return hasMouseInformation; }
    }
    public global::McsfCommunication.MouseInformation MouseInformation {
      get { return mouseInformation_; }
    }
    
    public const int KeyboardInformationFieldNumber = 4;
    private bool hasKeyboardInformation;
    private global::McsfCommunication.KeyboardInformation keyboardInformation_ = global::McsfCommunication.KeyboardInformation.DefaultInstance;
    public bool HasKeyboardInformation {
      get { return hasKeyboardInformation; }
    }
    public global::McsfCommunication.KeyboardInformation KeyboardInformation {
      get { return keyboardInformation_; }
    }
    
    public const int ToolInformationFieldNumber = 5;
    private bool hasToolInformation;
    private global::McsfCommunication.ToolInformation toolInformation_ = global::McsfCommunication.ToolInformation.DefaultInstance;
    public bool HasToolInformation {
      get { return hasToolInformation; }
    }
    public global::McsfCommunication.ToolInformation ToolInformation {
      get { return toolInformation_; }
    }
    
    public const int SeriesSettingInformationFieldNumber = 6;
    private bool hasSeriesSettingInformation;
    private global::McsfCommunication.SeriesSettingInformation seriesSettingInformation_ = global::McsfCommunication.SeriesSettingInformation.DefaultInstance;
    public bool HasSeriesSettingInformation {
      get { return hasSeriesSettingInformation; }
    }
    public global::McsfCommunication.SeriesSettingInformation SeriesSettingInformation {
      get { return seriesSettingInformation_; }
    }
    
    public const int SiteSettingInformationFieldNumber = 7;
    private bool hasSiteSettingInformation;
    private global::McsfCommunication.SiteSettingInformation siteSettingInformation_ = global::McsfCommunication.SiteSettingInformation.DefaultInstance;
    public bool HasSiteSettingInformation {
      get { return hasSiteSettingInformation; }
    }
    public global::McsfCommunication.SiteSettingInformation SiteSettingInformation {
      get { return siteSettingInformation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasImagePosId) return false;
        if (!ImagePosId.IsInitialized) return false;
        if (HasOpenImageInformation) {
          if (!OpenImageInformation.IsInitialized) return false;
        }
        if (HasMouseInformation) {
          if (!MouseInformation.IsInitialized) return false;
        }
        if (HasKeyboardInformation) {
          if (!KeyboardInformation.IsInitialized) return false;
        }
        if (HasToolInformation) {
          if (!ToolInformation.IsInitialized) return false;
        }
        if (HasSiteSettingInformation) {
          if (!SiteSettingInformation.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasImagePosId) {
        output.WriteMessage(1, ImagePosId);
      }
      if (HasOpenImageInformation) {
        output.WriteMessage(2, OpenImageInformation);
      }
      if (HasMouseInformation) {
        output.WriteMessage(3, MouseInformation);
      }
      if (HasKeyboardInformation) {
        output.WriteMessage(4, KeyboardInformation);
      }
      if (HasToolInformation) {
        output.WriteMessage(5, ToolInformation);
      }
      if (HasSeriesSettingInformation) {
        output.WriteMessage(6, SeriesSettingInformation);
      }
      if (HasSiteSettingInformation) {
        output.WriteMessage(7, SiteSettingInformation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasImagePosId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ImagePosId);
        }
        if (HasOpenImageInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, OpenImageInformation);
        }
        if (HasMouseInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, MouseInformation);
        }
        if (HasKeyboardInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, KeyboardInformation);
        }
        if (HasToolInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ToolInformation);
        }
        if (HasSeriesSettingInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, SeriesSettingInformation);
        }
        if (HasSiteSettingInformation) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, SiteSettingInformation);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ImageRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ImageRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ImageRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ImageRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ImageRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ImageRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ImageRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ImageRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ImageRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ImageRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ImageRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ImageRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ImageRequest result = new ImageRequest();
      
      protected override ImageRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ImageRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ImageRequest.Descriptor; }
      }
      
      public override ImageRequest DefaultInstanceForType {
        get { return global::McsfCommunication.ImageRequest.DefaultInstance; }
      }
      
      public override ImageRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ImageRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ImageRequest) {
          return MergeFrom((ImageRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ImageRequest other) {
        if (other == global::McsfCommunication.ImageRequest.DefaultInstance) return this;
        if (other.HasImagePosId) {
          MergeImagePosId(other.ImagePosId);
        }
        if (other.HasOpenImageInformation) {
          MergeOpenImageInformation(other.OpenImageInformation);
        }
        if (other.HasMouseInformation) {
          MergeMouseInformation(other.MouseInformation);
        }
        if (other.HasKeyboardInformation) {
          MergeKeyboardInformation(other.KeyboardInformation);
        }
        if (other.HasToolInformation) {
          MergeToolInformation(other.ToolInformation);
        }
        if (other.HasSeriesSettingInformation) {
          MergeSeriesSettingInformation(other.SeriesSettingInformation);
        }
        if (other.HasSiteSettingInformation) {
          MergeSiteSettingInformation(other.SiteSettingInformation);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::McsfCommunication.ImagePosId.Builder subBuilder = global::McsfCommunication.ImagePosId.CreateBuilder();
              if (HasImagePosId) {
                subBuilder.MergeFrom(ImagePosId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImagePosId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::McsfCommunication.OpenImageInformation.Builder subBuilder = global::McsfCommunication.OpenImageInformation.CreateBuilder();
              if (HasOpenImageInformation) {
                subBuilder.MergeFrom(OpenImageInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OpenImageInformation = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::McsfCommunication.MouseInformation.Builder subBuilder = global::McsfCommunication.MouseInformation.CreateBuilder();
              if (HasMouseInformation) {
                subBuilder.MergeFrom(MouseInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MouseInformation = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::McsfCommunication.KeyboardInformation.Builder subBuilder = global::McsfCommunication.KeyboardInformation.CreateBuilder();
              if (HasKeyboardInformation) {
                subBuilder.MergeFrom(KeyboardInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyboardInformation = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::McsfCommunication.ToolInformation.Builder subBuilder = global::McsfCommunication.ToolInformation.CreateBuilder();
              if (HasToolInformation) {
                subBuilder.MergeFrom(ToolInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToolInformation = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::McsfCommunication.SeriesSettingInformation.Builder subBuilder = global::McsfCommunication.SeriesSettingInformation.CreateBuilder();
              if (HasSeriesSettingInformation) {
                subBuilder.MergeFrom(SeriesSettingInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeriesSettingInformation = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::McsfCommunication.SiteSettingInformation.Builder subBuilder = global::McsfCommunication.SiteSettingInformation.CreateBuilder();
              if (HasSiteSettingInformation) {
                subBuilder.MergeFrom(SiteSettingInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SiteSettingInformation = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasImagePosId {
       get { return result.HasImagePosId; }
      }
      public global::McsfCommunication.ImagePosId ImagePosId {
        get { return result.ImagePosId; }
        set { SetImagePosId(value); }
      }
      public Builder SetImagePosId(global::McsfCommunication.ImagePosId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasImagePosId = true;
        result.imagePosId_ = value;
        return this;
      }
      public Builder SetImagePosId(global::McsfCommunication.ImagePosId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasImagePosId = true;
        result.imagePosId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImagePosId(global::McsfCommunication.ImagePosId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasImagePosId &&
            result.imagePosId_ != global::McsfCommunication.ImagePosId.DefaultInstance) {
            result.imagePosId_ = global::McsfCommunication.ImagePosId.CreateBuilder(result.imagePosId_).MergeFrom(value).BuildPartial();
        } else {
          result.imagePosId_ = value;
        }
        result.hasImagePosId = true;
        return this;
      }
      public Builder ClearImagePosId() {
        result.hasImagePosId = false;
        result.imagePosId_ = global::McsfCommunication.ImagePosId.DefaultInstance;
        return this;
      }
      
      public bool HasOpenImageInformation {
       get { return result.HasOpenImageInformation; }
      }
      public global::McsfCommunication.OpenImageInformation OpenImageInformation {
        get { return result.OpenImageInformation; }
        set { SetOpenImageInformation(value); }
      }
      public Builder SetOpenImageInformation(global::McsfCommunication.OpenImageInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOpenImageInformation = true;
        result.openImageInformation_ = value;
        return this;
      }
      public Builder SetOpenImageInformation(global::McsfCommunication.OpenImageInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOpenImageInformation = true;
        result.openImageInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOpenImageInformation(global::McsfCommunication.OpenImageInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOpenImageInformation &&
            result.openImageInformation_ != global::McsfCommunication.OpenImageInformation.DefaultInstance) {
            result.openImageInformation_ = global::McsfCommunication.OpenImageInformation.CreateBuilder(result.openImageInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.openImageInformation_ = value;
        }
        result.hasOpenImageInformation = true;
        return this;
      }
      public Builder ClearOpenImageInformation() {
        result.hasOpenImageInformation = false;
        result.openImageInformation_ = global::McsfCommunication.OpenImageInformation.DefaultInstance;
        return this;
      }
      
      public bool HasMouseInformation {
       get { return result.HasMouseInformation; }
      }
      public global::McsfCommunication.MouseInformation MouseInformation {
        get { return result.MouseInformation; }
        set { SetMouseInformation(value); }
      }
      public Builder SetMouseInformation(global::McsfCommunication.MouseInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMouseInformation = true;
        result.mouseInformation_ = value;
        return this;
      }
      public Builder SetMouseInformation(global::McsfCommunication.MouseInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasMouseInformation = true;
        result.mouseInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMouseInformation(global::McsfCommunication.MouseInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasMouseInformation &&
            result.mouseInformation_ != global::McsfCommunication.MouseInformation.DefaultInstance) {
            result.mouseInformation_ = global::McsfCommunication.MouseInformation.CreateBuilder(result.mouseInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.mouseInformation_ = value;
        }
        result.hasMouseInformation = true;
        return this;
      }
      public Builder ClearMouseInformation() {
        result.hasMouseInformation = false;
        result.mouseInformation_ = global::McsfCommunication.MouseInformation.DefaultInstance;
        return this;
      }
      
      public bool HasKeyboardInformation {
       get { return result.HasKeyboardInformation; }
      }
      public global::McsfCommunication.KeyboardInformation KeyboardInformation {
        get { return result.KeyboardInformation; }
        set { SetKeyboardInformation(value); }
      }
      public Builder SetKeyboardInformation(global::McsfCommunication.KeyboardInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasKeyboardInformation = true;
        result.keyboardInformation_ = value;
        return this;
      }
      public Builder SetKeyboardInformation(global::McsfCommunication.KeyboardInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasKeyboardInformation = true;
        result.keyboardInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyboardInformation(global::McsfCommunication.KeyboardInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasKeyboardInformation &&
            result.keyboardInformation_ != global::McsfCommunication.KeyboardInformation.DefaultInstance) {
            result.keyboardInformation_ = global::McsfCommunication.KeyboardInformation.CreateBuilder(result.keyboardInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.keyboardInformation_ = value;
        }
        result.hasKeyboardInformation = true;
        return this;
      }
      public Builder ClearKeyboardInformation() {
        result.hasKeyboardInformation = false;
        result.keyboardInformation_ = global::McsfCommunication.KeyboardInformation.DefaultInstance;
        return this;
      }
      
      public bool HasToolInformation {
       get { return result.HasToolInformation; }
      }
      public global::McsfCommunication.ToolInformation ToolInformation {
        get { return result.ToolInformation; }
        set { SetToolInformation(value); }
      }
      public Builder SetToolInformation(global::McsfCommunication.ToolInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToolInformation = true;
        result.toolInformation_ = value;
        return this;
      }
      public Builder SetToolInformation(global::McsfCommunication.ToolInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToolInformation = true;
        result.toolInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToolInformation(global::McsfCommunication.ToolInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToolInformation &&
            result.toolInformation_ != global::McsfCommunication.ToolInformation.DefaultInstance) {
            result.toolInformation_ = global::McsfCommunication.ToolInformation.CreateBuilder(result.toolInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.toolInformation_ = value;
        }
        result.hasToolInformation = true;
        return this;
      }
      public Builder ClearToolInformation() {
        result.hasToolInformation = false;
        result.toolInformation_ = global::McsfCommunication.ToolInformation.DefaultInstance;
        return this;
      }
      
      public bool HasSeriesSettingInformation {
       get { return result.HasSeriesSettingInformation; }
      }
      public global::McsfCommunication.SeriesSettingInformation SeriesSettingInformation {
        get { return result.SeriesSettingInformation; }
        set { SetSeriesSettingInformation(value); }
      }
      public Builder SetSeriesSettingInformation(global::McsfCommunication.SeriesSettingInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSeriesSettingInformation = true;
        result.seriesSettingInformation_ = value;
        return this;
      }
      public Builder SetSeriesSettingInformation(global::McsfCommunication.SeriesSettingInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSeriesSettingInformation = true;
        result.seriesSettingInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeriesSettingInformation(global::McsfCommunication.SeriesSettingInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSeriesSettingInformation &&
            result.seriesSettingInformation_ != global::McsfCommunication.SeriesSettingInformation.DefaultInstance) {
            result.seriesSettingInformation_ = global::McsfCommunication.SeriesSettingInformation.CreateBuilder(result.seriesSettingInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.seriesSettingInformation_ = value;
        }
        result.hasSeriesSettingInformation = true;
        return this;
      }
      public Builder ClearSeriesSettingInformation() {
        result.hasSeriesSettingInformation = false;
        result.seriesSettingInformation_ = global::McsfCommunication.SeriesSettingInformation.DefaultInstance;
        return this;
      }
      
      public bool HasSiteSettingInformation {
       get { return result.HasSiteSettingInformation; }
      }
      public global::McsfCommunication.SiteSettingInformation SiteSettingInformation {
        get { return result.SiteSettingInformation; }
        set { SetSiteSettingInformation(value); }
      }
      public Builder SetSiteSettingInformation(global::McsfCommunication.SiteSettingInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSiteSettingInformation = true;
        result.siteSettingInformation_ = value;
        return this;
      }
      public Builder SetSiteSettingInformation(global::McsfCommunication.SiteSettingInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSiteSettingInformation = true;
        result.siteSettingInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSiteSettingInformation(global::McsfCommunication.SiteSettingInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSiteSettingInformation &&
            result.siteSettingInformation_ != global::McsfCommunication.SiteSettingInformation.DefaultInstance) {
            result.siteSettingInformation_ = global::McsfCommunication.SiteSettingInformation.CreateBuilder(result.siteSettingInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.siteSettingInformation_ = value;
        }
        result.hasSiteSettingInformation = true;
        return this;
      }
      public Builder ClearSiteSettingInformation() {
        result.hasSiteSettingInformation = false;
        result.siteSettingInformation_ = global::McsfCommunication.SiteSettingInformation.DefaultInstance;
        return this;
      }
    }
    static ImageRequest() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ReportMouseCursorArgs : pb::GeneratedMessage<ReportMouseCursorArgs, ReportMouseCursorArgs.Builder> {
    private static readonly ReportMouseCursorArgs defaultInstance = new Builder().BuildPartial();
    public static ReportMouseCursorArgs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReportMouseCursorArgs DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ReportMouseCursorArgs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ReportMouseCursorArgs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReportMouseCursorArgs, ReportMouseCursorArgs.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ReportMouseCursorArgs__FieldAccessorTable; }
    }
    
    public const int MouseTypeFieldNumber = 1;
    private bool hasMouseType;
    private global::McsfCommunication.MouseCursorType mouseType_ = global::McsfCommunication.MouseCursorType.MouseCursorDefault;
    public bool HasMouseType {
      get { return hasMouseType; }
    }
    public global::McsfCommunication.MouseCursorType MouseType {
      get { return mouseType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMouseType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasMouseType) {
        output.WriteEnum(1, (int) MouseType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasMouseType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MouseType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReportMouseCursorArgs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportMouseCursorArgs ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReportMouseCursorArgs prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ReportMouseCursorArgs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ReportMouseCursorArgs result = new ReportMouseCursorArgs();
      
      protected override ReportMouseCursorArgs MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ReportMouseCursorArgs();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ReportMouseCursorArgs.Descriptor; }
      }
      
      public override ReportMouseCursorArgs DefaultInstanceForType {
        get { return global::McsfCommunication.ReportMouseCursorArgs.DefaultInstance; }
      }
      
      public override ReportMouseCursorArgs BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ReportMouseCursorArgs returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReportMouseCursorArgs) {
          return MergeFrom((ReportMouseCursorArgs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReportMouseCursorArgs other) {
        if (other == global::McsfCommunication.ReportMouseCursorArgs.DefaultInstance) return this;
        if (other.HasMouseType) {
          MouseType = other.MouseType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::McsfCommunication.MouseCursorType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                MouseType = (global::McsfCommunication.MouseCursorType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasMouseType {
       get { return result.HasMouseType; }
      }
      public global::McsfCommunication.MouseCursorType MouseType {
        get { return result.MouseType; }
        set { SetMouseType(value); }
      }
      public Builder SetMouseType(global::McsfCommunication.MouseCursorType value) {
        result.hasMouseType = true;
        result.mouseType_ = value;
        return this;
      }
      public Builder ClearMouseType() {
        result.hasMouseType = false;
        result.mouseType_ = global::McsfCommunication.MouseCursorType.MouseCursorDefault;
        return this;
      }
    }
    static ReportMouseCursorArgs() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ReportSeriesStatusArgs : pb::GeneratedMessage<ReportSeriesStatusArgs, ReportSeriesStatusArgs.Builder> {
    private static readonly ReportSeriesStatusArgs defaultInstance = new Builder().BuildPartial();
    public static ReportSeriesStatusArgs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReportSeriesStatusArgs DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ReportSeriesStatusArgs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ReportSeriesStatusArgs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReportSeriesStatusArgs, ReportSeriesStatusArgs.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ReportSeriesStatusArgs__FieldAccessorTable; }
    }
    
    public const int FirstShownImageIndexFieldNumber = 1;
    private bool hasFirstShownImageIndex;
    private int firstShownImageIndex_ = 0;
    public bool HasFirstShownImageIndex {
      get { return hasFirstShownImageIndex; }
    }
    public int FirstShownImageIndex {
      get { return firstShownImageIndex_; }
    }
    
    public const int CellsNumFieldNumber = 2;
    private bool hasCellsNum;
    private int cellsNum_ = 0;
    public bool HasCellsNum {
      get { return hasCellsNum; }
    }
    public int CellsNum {
      get { return cellsNum_; }
    }
    
    public const int ImagesCountFieldNumber = 3;
    private bool hasImagesCount;
    private int imagesCount_ = 0;
    public bool HasImagesCount {
      get { return hasImagesCount; }
    }
    public int ImagesCount {
      get { return imagesCount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFirstShownImageIndex) return false;
        if (!hasCellsNum) return false;
        if (!hasImagesCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFirstShownImageIndex) {
        output.WriteInt32(1, FirstShownImageIndex);
      }
      if (HasCellsNum) {
        output.WriteInt32(2, CellsNum);
      }
      if (HasImagesCount) {
        output.WriteInt32(3, ImagesCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFirstShownImageIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FirstShownImageIndex);
        }
        if (HasCellsNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, CellsNum);
        }
        if (HasImagesCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ImagesCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReportSeriesStatusArgs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportSeriesStatusArgs ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReportSeriesStatusArgs prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ReportSeriesStatusArgs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ReportSeriesStatusArgs result = new ReportSeriesStatusArgs();
      
      protected override ReportSeriesStatusArgs MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ReportSeriesStatusArgs();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ReportSeriesStatusArgs.Descriptor; }
      }
      
      public override ReportSeriesStatusArgs DefaultInstanceForType {
        get { return global::McsfCommunication.ReportSeriesStatusArgs.DefaultInstance; }
      }
      
      public override ReportSeriesStatusArgs BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ReportSeriesStatusArgs returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReportSeriesStatusArgs) {
          return MergeFrom((ReportSeriesStatusArgs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReportSeriesStatusArgs other) {
        if (other == global::McsfCommunication.ReportSeriesStatusArgs.DefaultInstance) return this;
        if (other.HasFirstShownImageIndex) {
          FirstShownImageIndex = other.FirstShownImageIndex;
        }
        if (other.HasCellsNum) {
          CellsNum = other.CellsNum;
        }
        if (other.HasImagesCount) {
          ImagesCount = other.ImagesCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              FirstShownImageIndex = input.ReadInt32();
              break;
            }
            case 16: {
              CellsNum = input.ReadInt32();
              break;
            }
            case 24: {
              ImagesCount = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasFirstShownImageIndex {
        get { return result.HasFirstShownImageIndex; }
      }
      public int FirstShownImageIndex {
        get { return result.FirstShownImageIndex; }
        set { SetFirstShownImageIndex(value); }
      }
      public Builder SetFirstShownImageIndex(int value) {
        result.hasFirstShownImageIndex = true;
        result.firstShownImageIndex_ = value;
        return this;
      }
      public Builder ClearFirstShownImageIndex() {
        result.hasFirstShownImageIndex = false;
        result.firstShownImageIndex_ = 0;
        return this;
      }
      
      public bool HasCellsNum {
        get { return result.HasCellsNum; }
      }
      public int CellsNum {
        get { return result.CellsNum; }
        set { SetCellsNum(value); }
      }
      public Builder SetCellsNum(int value) {
        result.hasCellsNum = true;
        result.cellsNum_ = value;
        return this;
      }
      public Builder ClearCellsNum() {
        result.hasCellsNum = false;
        result.cellsNum_ = 0;
        return this;
      }
      
      public bool HasImagesCount {
        get { return result.HasImagesCount; }
      }
      public int ImagesCount {
        get { return result.ImagesCount; }
        set { SetImagesCount(value); }
      }
      public Builder SetImagesCount(int value) {
        result.hasImagesCount = true;
        result.imagesCount_ = value;
        return this;
      }
      public Builder ClearImagesCount() {
        result.hasImagesCount = false;
        result.imagesCount_ = 0;
        return this;
      }
    }
    static ReportSeriesStatusArgs() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ReportStatusInformation : pb::GeneratedMessage<ReportStatusInformation, ReportStatusInformation.Builder> {
    private static readonly ReportStatusInformation defaultInstance = new Builder().BuildPartial();
    public static ReportStatusInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReportStatusInformation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ReportStatusInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ReportStatusInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReportStatusInformation, ReportStatusInformation.Builder> InternalFieldAccessors {
      get { return global::McsfCommunication.CommunicationMessage.internal__static_McsfCommunication_ReportStatusInformation__FieldAccessorTable; }
    }
    
    public const int ReportTypeFieldNumber = 1;
    private bool hasReportType;
    private global::McsfCommunication.ReportStatusType reportType_ = global::McsfCommunication.ReportStatusType.ReportMouseStatus;
    public bool HasReportType {
      get { return hasReportType; }
    }
    public global::McsfCommunication.ReportStatusType ReportType {
      get { return reportType_; }
    }
    
    public const int ImagePosIdFieldNumber = 2;
    private bool hasImagePosId;
    private global::McsfCommunication.ImagePosId imagePosId_ = global::McsfCommunication.ImagePosId.DefaultInstance;
    public bool HasImagePosId {
      get { return hasImagePosId; }
    }
    public global::McsfCommunication.ImagePosId ImagePosId {
      get { return imagePosId_; }
    }
    
    public const int MouseCursorFieldNumber = 3;
    private bool hasMouseCursor;
    private global::McsfCommunication.ReportMouseCursorArgs mouseCursor_ = global::McsfCommunication.ReportMouseCursorArgs.DefaultInstance;
    public bool HasMouseCursor {
      get { return hasMouseCursor; }
    }
    public global::McsfCommunication.ReportMouseCursorArgs MouseCursor {
      get { return mouseCursor_; }
    }
    
    public const int SeriesStatusFieldNumber = 4;
    private bool hasSeriesStatus;
    private global::McsfCommunication.ReportSeriesStatusArgs seriesStatus_ = global::McsfCommunication.ReportSeriesStatusArgs.DefaultInstance;
    public bool HasSeriesStatus {
      get { return hasSeriesStatus; }
    }
    public global::McsfCommunication.ReportSeriesStatusArgs SeriesStatus {
      get { return seriesStatus_; }
    }
    
    public const int NoteStatusFieldNumber = 5;
    private bool hasNoteStatus;
    private global::McsfCommunication.ReportNoteStatusArgs noteStatus_ = global::McsfCommunication.ReportNoteStatusArgs.DefaultInstance;
    public bool HasNoteStatus {
      get { return hasNoteStatus; }
    }
    public global::McsfCommunication.ReportNoteStatusArgs NoteStatus {
      get { return noteStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReportType) return false;
        if (!hasImagePosId) return false;
        if (!ImagePosId.IsInitialized) return false;
        if (HasMouseCursor) {
          if (!MouseCursor.IsInitialized) return false;
        }
        if (HasSeriesStatus) {
          if (!SeriesStatus.IsInitialized) return false;
        }
        if (HasNoteStatus) {
          if (!NoteStatus.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasReportType) {
        output.WriteEnum(1, (int) ReportType);
      }
      if (HasImagePosId) {
        output.WriteMessage(2, ImagePosId);
      }
      if (HasMouseCursor) {
        output.WriteMessage(3, MouseCursor);
      }
      if (HasSeriesStatus) {
        output.WriteMessage(4, SeriesStatus);
      }
      if (HasNoteStatus) {
        output.WriteMessage(5, NoteStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasReportType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ReportType);
        }
        if (HasImagePosId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ImagePosId);
        }
        if (HasMouseCursor) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, MouseCursor);
        }
        if (HasSeriesStatus) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, SeriesStatus);
        }
        if (HasNoteStatus) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, NoteStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReportStatusInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReportStatusInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReportStatusInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportStatusInformation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReportStatusInformation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ReportStatusInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ReportStatusInformation result = new ReportStatusInformation();
      
      protected override ReportStatusInformation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ReportStatusInformation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::McsfCommunication.ReportStatusInformation.Descriptor; }
      }
      
      public override ReportStatusInformation DefaultInstanceForType {
        get { return global::McsfCommunication.ReportStatusInformation.DefaultInstance; }
      }
      
      public override ReportStatusInformation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ReportStatusInformation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReportStatusInformation) {
          return MergeFrom((ReportStatusInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReportStatusInformation other) {
        if (other == global::McsfCommunication.ReportStatusInformation.DefaultInstance) return this;
        if (other.HasReportType) {
          ReportType = other.ReportType;
        }
        if (other.HasImagePosId) {
          MergeImagePosId(other.ImagePosId);
        }
        if (other.HasMouseCursor) {
          MergeMouseCursor(other.MouseCursor);
        }
        if (other.HasSeriesStatus) {
          MergeSeriesStatus(other.SeriesStatus);
        }
        if (other.HasNoteStatus) {
          MergeNoteStatus(other.NoteStatus);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::McsfCommunication.ReportStatusType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                ReportType = (global::McsfCommunication.ReportStatusType) rawValue;
              }
              break;
            }
            case 18: {
              global::McsfCommunication.ImagePosId.Builder subBuilder = global::McsfCommunication.ImagePosId.CreateBuilder();
              if (HasImagePosId) {
                subBuilder.MergeFrom(ImagePosId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImagePosId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::McsfCommunication.ReportMouseCursorArgs.Builder subBuilder = global::McsfCommunication.ReportMouseCursorArgs.CreateBuilder();
              if (HasMouseCursor) {
                subBuilder.MergeFrom(MouseCursor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MouseCursor = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::McsfCommunication.ReportSeriesStatusArgs.Builder subBuilder = global::McsfCommunication.ReportSeriesStatusArgs.CreateBuilder();
              if (HasSeriesStatus) {
                subBuilder.MergeFrom(SeriesStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeriesStatus = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::McsfCommunication.ReportNoteStatusArgs.Builder subBuilder = global::McsfCommunication.ReportNoteStatusArgs.CreateBuilder();
              if (HasNoteStatus) {
                subBuilder.MergeFrom(NoteStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NoteStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasReportType {
       get { return result.HasReportType; }
      }
      public global::McsfCommunication.ReportStatusType ReportType {
        get { return result.ReportType; }
        set { SetReportType(value); }
      }
      public Builder SetReportType(global::McsfCommunication.ReportStatusType value) {
        result.hasReportType = true;
        result.reportType_ = value;
        return this;
      }
      public Builder ClearReportType() {
        result.hasReportType = false;
        result.reportType_ = global::McsfCommunication.ReportStatusType.ReportMouseStatus;
        return this;
      }
      
      public bool HasImagePosId {
       get { return result.HasImagePosId; }
      }
      public global::McsfCommunication.ImagePosId ImagePosId {
        get { return result.ImagePosId; }
        set { SetImagePosId(value); }
      }
      public Builder SetImagePosId(global::McsfCommunication.ImagePosId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasImagePosId = true;
        result.imagePosId_ = value;
        return this;
      }
      public Builder SetImagePosId(global::McsfCommunication.ImagePosId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasImagePosId = true;
        result.imagePosId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImagePosId(global::McsfCommunication.ImagePosId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasImagePosId &&
            result.imagePosId_ != global::McsfCommunication.ImagePosId.DefaultInstance) {
            result.imagePosId_ = global::McsfCommunication.ImagePosId.CreateBuilder(result.imagePosId_).MergeFrom(value).BuildPartial();
        } else {
          result.imagePosId_ = value;
        }
        result.hasImagePosId = true;
        return this;
      }
      public Builder ClearImagePosId() {
        result.hasImagePosId = false;
        result.imagePosId_ = global::McsfCommunication.ImagePosId.DefaultInstance;
        return this;
      }
      
      public bool HasMouseCursor {
       get { return result.HasMouseCursor; }
      }
      public global::McsfCommunication.ReportMouseCursorArgs MouseCursor {
        get { return result.MouseCursor; }
        set { SetMouseCursor(value); }
      }
      public Builder SetMouseCursor(global::McsfCommunication.ReportMouseCursorArgs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMouseCursor = true;
        result.mouseCursor_ = value;
        return this;
      }
      public Builder SetMouseCursor(global::McsfCommunication.ReportMouseCursorArgs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasMouseCursor = true;
        result.mouseCursor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMouseCursor(global::McsfCommunication.ReportMouseCursorArgs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasMouseCursor &&
            result.mouseCursor_ != global::McsfCommunication.ReportMouseCursorArgs.DefaultInstance) {
            result.mouseCursor_ = global::McsfCommunication.ReportMouseCursorArgs.CreateBuilder(result.mouseCursor_).MergeFrom(value).BuildPartial();
        } else {
          result.mouseCursor_ = value;
        }
        result.hasMouseCursor = true;
        return this;
      }
      public Builder ClearMouseCursor() {
        result.hasMouseCursor = false;
        result.mouseCursor_ = global::McsfCommunication.ReportMouseCursorArgs.DefaultInstance;
        return this;
      }
      
      public bool HasSeriesStatus {
       get { return result.HasSeriesStatus; }
      }
      public global::McsfCommunication.ReportSeriesStatusArgs SeriesStatus {
        get { return result.SeriesStatus; }
        set { SetSeriesStatus(value); }
      }
      public Builder SetSeriesStatus(global::McsfCommunication.ReportSeriesStatusArgs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSeriesStatus = true;
        result.seriesStatus_ = value;
        return this;
      }
      public Builder SetSeriesStatus(global::McsfCommunication.ReportSeriesStatusArgs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSeriesStatus = true;
        result.seriesStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeriesStatus(global::McsfCommunication.ReportSeriesStatusArgs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSeriesStatus &&
            result.seriesStatus_ != global::McsfCommunication.ReportSeriesStatusArgs.DefaultInstance) {
            result.seriesStatus_ = global::McsfCommunication.ReportSeriesStatusArgs.CreateBuilder(result.seriesStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.seriesStatus_ = value;
        }
        result.hasSeriesStatus = true;
        return this;
      }
      public Builder ClearSeriesStatus() {
        result.hasSeriesStatus = false;
        result.seriesStatus_ = global::McsfCommunication.ReportSeriesStatusArgs.DefaultInstance;
        return this;
      }
      
      public bool HasNoteStatus {
       get { return result.HasNoteStatus; }
      }
      public global::McsfCommunication.ReportNoteStatusArgs NoteStatus {
        get { return result.NoteStatus; }
        set { SetNoteStatus(value); }
      }
      public Builder SetNoteStatus(global::McsfCommunication.ReportNoteStatusArgs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNoteStatus = true;
        result.noteStatus_ = value;
        return this;
      }
      public Builder SetNoteStatus(global::McsfCommunication.ReportNoteStatusArgs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasNoteStatus = true;
        result.noteStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNoteStatus(global::McsfCommunication.ReportNoteStatusArgs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasNoteStatus &&
            result.noteStatus_ != global::McsfCommunication.ReportNoteStatusArgs.DefaultInstance) {
            result.noteStatus_ = global::McsfCommunication.ReportNoteStatusArgs.CreateBuilder(result.noteStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.noteStatus_ = value;
        }
        result.hasNoteStatus = true;
        return this;
      }
      public Builder ClearNoteStatus() {
        result.hasNoteStatus = false;
        result.noteStatus_ = global::McsfCommunication.ReportNoteStatusArgs.DefaultInstance;
        return this;
      }
    }
    static ReportStatusInformation() {
      object.ReferenceEquals(global::McsfCommunication.CommunicationMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}
